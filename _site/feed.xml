<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko-KR, en-US"><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko-KR, en-US" /><updated>2022-02-24T12:11:16+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">CHAN ㅣ DEV</title><subtitle>DEV Blog by Chan ㅣ Like the beginning, now, always and forever!
</subtitle><author><name>Byungchan Park</name><email>prettygood236@gmail.com</email></author><entry><title type="html">6. Dynamic Programming</title><link href="http://localhost:4000/data-structures-and-algorithms/dynamic-programming.html" rel="alternate" type="text/html" title="6. Dynamic Programming" /><published>2022-02-19T00:00:00+09:00</published><updated>2022-02-19T00:00:00+09:00</updated><id>http://localhost:4000/data-structures-and-algorithms/dynamic-programming</id><content type="html" xml:base="http://localhost:4000/data-structures-and-algorithms/dynamic-programming.html">* toc
{:toc .large-only}

## 6. Dynamic Programming

### 6.1 What is Dynamic Programming?

Dynamic programming is a method to dramatically improve execution time efficiency by properly using memory.
It saves &lt;span style='font-size:1.1em; background-color: #FFF39B'&gt;*already calculated results (small problems) in a separate memory area to avoid recalculation.*&lt;/span&gt; 

Dynamic programming can be used when the problem satisfies the following two conditions.

*&lt;span style='background-color: #E0FFC4'&gt;**1. Obtimal Substructure :**&lt;/span&gt; &lt;br&gt;
A big problem can be divided into small problems, and the big problem can be solved by collecting the answers to the divided small problems. &lt;br&gt;
&lt;span style='background-color: #E0FFC4'&gt;**2. Overlapping Subproblem :**&lt;/span&gt;  &lt;br&gt;
You have to solve the same small problem over and over again.*

### 6.2 What is Memoization?

Memoization is a technique of &lt;span style='font-size:1.1em; background-color: #FFF39B'&gt;*memoizing the result once calculated in the memory space.*&lt;/span&gt;
- If you call the same problem again, you get the result you noted.
- Also called &lt;span style='background-color: #E0FFC4'&gt;***Caching***&lt;/span&gt; in that it records a value.
&lt;br&gt;
&lt;br&gt;

In general, Dynamic programming can be implemented in two ways:  &lt;span style='background-color: #FFDFF6'&gt;***Top-down***&lt;/span&gt; and &lt;span style='background-color: #FFDFF6'&gt;***Bottom-up.***&lt;/span&gt; 
- &lt;span style='background-color: #E0FFC4'&gt;***Memoization***&lt;/span&gt; enables *&lt;u&gt;Top-down&lt;/u&gt;* dynamic programming.
- A classic form of dynamic programming is the *&lt;u&gt;Bottom-up&lt;/u&gt;* approach. 
  - The list for storing the results is called the DP table.

### 6.3 Fibonacci Sequence Implementation

The Fibonacci Sequence is a sequence of the following form, and can be effectively calculated with dynamic programming.

$$
1,1,2,3,5,8,13,21,34,55,89,...
$$
The ignition expression means a relational expression between adjacent identities. &lt;br&gt;
The Fibonacci sequence can be expressed as an ignition formula as follows:

$$
a_n = a_{n-1} + a_{n-2},\quad a_1 = 1, \quad a_2 = 1
$$

Solving the Fibonacci sequence with a simple recursive function has exponential time complexity. (The time complexity is too high.)&lt;br&gt;

![Fibonacci_example](/assets/img/coding-test/fibonacci_example.png){:width=&quot;80%&quot;}
{:.figure}

f(6)can be solved by finding f(5) and f(4) as above. -&gt; &lt;span style='background-color: #E0FFC4'&gt;***1. Optimal Substructure***&lt;/span&gt; &lt;br&gt;
Also, You can see that f(2) is &lt;u&gt;called multiple times&lt;/u&gt; -&gt; &lt;span style='background-color: #E0FFC4'&gt;***2. Overlapping Subproblem***&lt;/span&gt;

*&lt;u&gt;Therefore, the Fibonacci sequence can be implemented with dynamic programming!.&lt;/u&gt;*

**Fibonacci Sequence: Top-Down Dynamic Programming**

~~~py
# Python 
# Initialize the list to memoize the calculated result.
d = [0] * 100 

# Implementation of the Fibonacci function as a recursive function (top-down dynamic programming).
def fibo(x):
     # Exit condition (return 1 if 1 or 2)
     if x== 1 or x == 2:
         return 1
     # If the problem has already been calculated, return it as is.
     if d[x] != 0:
         return d[x]
     # If it is a problem that has not been calculated yet, the Fibonacci result is returned according to the ignition formula.
     d[x] = fibo(x-1) + fibo(x-2) # Write the added value to the list.
     return d[x]

print(fibo(99)) # 218922995834555169026
~~~

**Fibonacci Sequence: Bottom-Up Dynamic Programming**

~~~py
# Python
# Initialize the DP table to save the previously calculated result.
d = [0] * 100

# Reset the first and second Fibonacci numbers to 1.
d[1] = 1
d[2] = 1
n = 99

# Fibonacci Function implemented as a loop (bottom-up dynamic programming).
for i in range(3, n+1): #3 to nth
     d[i] = d[i-1] + d[i-2] # Calculate all Fibonacci numbers, find each term in turn, start with the small problem.

print(d[n]) # 218922995834555169026
~~~

If the already calculated result is memozied in memory, &lt;u&gt;only the colored node is actually called&lt;/u&gt; and visited as follows. -&gt; The time complexity is O(N).

![Fibonacci_example2](/assets/img/coding-test/fibonacci_example2.png)
{:.figure}


### 6.4 Dynamic Programming VS Divide-and-Conquer algorithm

　| Dynamic programming | Divide-and-conquer algorithm
--|:--:|:--:|
&lt;span style='background-color=#e0ffc4'&gt;*1. Optimal Substructure*&lt;/span&gt; | O | O
--|:--:|:--:|
&lt;span style='background-color=#e0ffc4'&gt;*2. Overlapping Subproblem*&lt;/span&gt; | O | **X**

Let's look at a typical example of divide-and-conquer, *quick sort*. &lt;br&gt;
Once the pivot element changes its position, the position of the pivot element does not change. &lt;br&gt;
The subproblem of re-processing the pivot after splitting is not called.

![Divide-and-conquer-example](/assets/img/coding-test/divide-and-conquer-example.png)



### 6.5 Dynamic Programming Example Problem

#### 6.5.1 Problem : Ant warrior

The ant warrior secretly attacks the food warehouse of the grasshopper village to make up for the shortage of food. There are several food warehouses in grasshopper Village, which are connected in a straight line.&lt;br&gt;
Each food warehouse stores a fixed number of food, and the ant warriors will selectively plunder the food warehouse to steal food. At this time, the grasshopper scouts can immediately detect when adjacent food warehouses are attacked among the food warehouses that exist in a straight line.&lt;br&gt;
Therefore, in order for the ant warrior to loot the food warehouse without being detected by the scouts, it must loot the food warehouse at least one square away.

For example, suppose there are 4 food depots as follows.&lt;br&gt;
{1, 3, 1, 5} &lt;br&gt;

At this time, the ant warrior can steal a total of 8 food, the maximum value when selecting the second and fourth food warehouses.&lt;br&gt;
The ant warrior wants to get as much food as possible when the food warehouse is in such a straight line.&lt;br&gt;
Write a program to *find the maximum amount of food* that can be obtained for an ant warrior given information about N food warehouses.&lt;br&gt;

**Difficulty: 2 \| 30 minutes to solve \| Time limit 1 seconds \| Memory limit 128 MB**
{:.message}

**Input conditions** &lt;br&gt;
The first line gives the number N of food depots. (3 &lt;=N &lt;=100 ) &lt;br&gt;
In the second line, the number K of food stored in each food warehouse is given, based on spaces. (0 &lt;=K &lt;= 1,000)

**Output conditions** &lt;br&gt;
In the first line, print the maximum amount of food an ant warrior can get.

| Input Example | Output Example|
|4|8|
|1 3 1 5|

#### 6.5.2 Solution : Ant warrior

Let's check an example. When N=4, the following cases may exist.
    The number of food choices is eight as follows.
    In the 7th case, you get 8 food, so the optimal solution is 8.
![Ant Warrior_1](/assets/img/coding-test/ant-warrior_1.png)

ai = optimal solution to the ith food warehouse (maximum value of food obtainable)
    If defined in this way, dynamic programming can be applied.
Assuming that you turn the food warehouse from left to right,
If it is decided whether or not to rob the specific i-th food warehouse,
You can choose the one that can steal more food from the two cases below.
![Ant Warrior_2](/assets/img/coding-test/ant-warrior_2.png)

 It is decided between the optimal solution up to i-1 and the optimal solution up to i -2 plus the present value.
Choose the larger of the two cases.
Use 2 small problems to solve the big problems.
![Ant Warrior_3](/assets/img/coding-test/ant-warrior_3.png)

ai = optimal solution to the ith food warehouse (maximum value of food obtainable)
ki = amount of food in the ith food pantry
The ignition formula is as follows.
     ai = max(ai-1, ai-2+ki) Choose the larger of the two
Food warehouses more than one square away can always be looted, so there is no need to consider (i-3) and lower.

~~~py
# Python
# Get an integer N
n = int(input( ))
#Get all food information input
array = list(map(int, input( ). split( )))

# Initialize the DP table to save the previously calculated result
d = [0] * 100 #because you can enter up to 100

# Dynamic Programming (Bottom Up)
d[0] = array[0] #maximum value up to first position
d[1] = max( array[0], array[1] ) # Choose the maximum value up to the second position, the larger value
for i in range(2, n); #Optimal solution from position 3 to nth ?
     d[i] = max(d[i-1], d[i-2] + array[i] ) #ignition expression

# Print the calculated result
print(d[n-1])
~~~

#### 6.5.3 Problem : Minimum number of currencies

There are N types of money. We try to minimize the number of these currencies so that the sum of their values ​​is M won. In this case, any number of currencies of each type can be used.

For example, if there are 2 won and 3 won units, using 5 3 won to make 15 won is the minimum number of currencies.

Write a program that prints the minimum number of currencies to make M won.

**Difficulty: 2 \| 30 minutes to solve \| Time limit 1 seconds \| Memory limit 128 MB**
{:.message}

**Input conditions** &lt;br&gt;
The first line is given N, M ( 1&lt;= N &lt;=100, 1&lt;= M &lt;= 10,000 ) &lt;br&gt;
The next N lines are given the value of each currency. The value of money is a natural number less than or equal to 10,000.

**Output conditions** &lt;br&gt;
Print the minimum number of currencies on the first line. &lt;br&gt;
If not possible, -1 is output.

| Input Example 1 | Output Example 1 |
|2 15|5
|2|
|3|

| Input Example 2 | Output Example 2 |
|3 4|-1
|3|
|5|
|7|

#### 6.5.4 Solution : Minimum number of currencies

$$a_{i}$$ = the minimum number of currencies that can make the amount i (the goal is to make the amount M, but solve the small problem first.) &lt;br&gt;
k = unit of each currency &lt;br&gt;
Ignition type: Each currency unit, k, is checked one by one.
- If there is a way to make $$a_{i-k}$$, $$a_{i}$$ = min($$a_{i}$$, $$a_{i-k+1}$$) is updated with a smaller value.
- If there is no way to create $$a_{i-k}$$, $$a_i$$ = INF.

Let's check if N = 3, M = 7, and the units of each currency are 2, 3, 5.

[Step 0] &lt;br&gt;
First, set the value of INF (infinite) to the value corresponding to each index.&lt;br&gt;
INF means that it is not possible to construct a currency that can create a specific amount. &lt;br&gt;
In this problem, 10,001 can be used.
![Minimum number of currencies_step0](/assets/img/coding-test/minimum-number-of-currencies_1.png){:width=&quot;80%&quot;}

[Step 1] &lt;br&gt;
Check the first monetary unit, 2. (If you can make i-2, you can also make amount i.)
According to the ignition formula, the list is updated as follows.
![Minimum number of currencies_step1](/assets/img/coding-test/minimum-number-of-currencies_2.png){:width=&quot;80%&quot;}

[Step 2] &lt;br&gt;
Check the second monetary unit, 3.
According to the ignition formula, the list is updated as follows.
![Minimum number of currencies_step2](/assets/img/coding-test/minimum-number-of-currencies_3.png){:width=&quot;80%&quot;}

[Step 3] &lt;br&gt;
The third monetary unit, 5, is identified.
According to the ignition formula, the list is finally updated as follows.
![Minimum number of currencies_step3](/assets/img/coding-test/minimum-number-of-currencies_4.png){:width=&quot;80%&quot;}

~~~py
# Python
# Get score N, M input.
n, m = map(int, input( ). split( ))
# Get information on N currency units.
array = [ ]
for i in range(n):
    array.append(int( input( )))

# Initialize the DP table to save the calculated result once.
d = [10001] * (m+1) # We want to find the minimum number of currencies for each amount from 0 won to m won.

# Dynamic Programming (Bottom up)
d[0] =0 # 0 won is the amount that can be made without using anything # i is each currency unit, j is each amount.

for i in range(n): # Ignition expression #for each monetary unit →
  for j in range(array[i], m+1): # Check all amounts →
    if d[j - array[i]] != 10001: # If there is a way to get the current amount minus the monetary unit = (i-k) won
        d[j] = min ( d[j], d[j - array[i] ]+1) # Update the optimal solution for the amount !#Update the smaller value

# Print the calculated result
if d[m] == 10001: # If there is no way to finally create M circle
  print(-1)
else: # Print if exists
  print(d[m])
~~~
 
#### 6.5.5 Problem : Gold Mine

There is a gold mine measuring n x m. The gold mine is divided into 1 x 1 squares, each of which contains a certain size of gold. &lt;br&gt;
Miners start with the first row and start digging for gold. You can start from any row in the first column. &lt;br&gt;
After that, it must move to one of three positions: upper right, lower right, and lower right each time over m-1 times.

Write a program that outputs the maximum amount of gold that a miner can obtain as a result.

![Gold Mine_1](/assets/img/coding-test/gold-mine_1.png){:width=&quot;80%&quot;}

**Difficulty: 2 \| 30 minutes to solve \| Time limit 1 seconds \| Memory limit 128 MB**
{:.message}

**Input conditions** &lt;br&gt;
Test case T is entered in the first line (1&lt;= T &lt;= 1000) Test case: starting number. &lt;br&gt;
In the first line of each test case, n and m are entered separated by spaces. (1&lt;= n,m &lt;= 20) &lt;br&gt;
In the second line, the number of gold buried at n x m locations is entered, separated by spaces. (1 &lt;= number of gold buried at each location &lt;=100)

**Output conditions** &lt;br&gt;
For each test case, we print the maximum amount of gold that a miner can obtain. Each test case is separated by a line break.

| Input Example | Output Example|
|2|19|
|3 4|16|
|1 3 3 2 2 1 4 1 0 6 4 7|
|4 4|
|1 3 1 5 2 2 4 1 5 0 2 3 0 6 1 2|
 
#### 6.5.6 Solution : Gold Mine

For all locations of gold mines, only the following three things need to be considered.

*1. If it comes from the top left.* &lt;br&gt;
*2. Coming from the lower left.* &lt;br&gt;
*3. If you are coming from the left.* 

The problem is solved by updating the table with the case with the most gold among the three cases.

![Gold Mine_2](/assets/img/coding-test/gold-mine_2.png)

- array[i][j] = amount of gold in row i and column j
- dp[i][j] = best solution to row i and column j (maximum gold value)

The ignition formula is as follows.

$$
dp[i][j] = array[i][j] + max(dp[i-1][j-1], dp[i][j-1], dp[i+1][j-1])
$$ &lt;br&gt;
#current amount of gold #top-left position #left position #bottom-left position

In this case, whenever you access the table, you need to check whether it is outside the range of the list.&lt;br&gt;
For convenience, there is no need to use a variable array containing initial data.&lt;br&gt;
You can apply dynamic programming by putting the initial data in the DP table.&lt;br&gt;
Check out the process of solving the gold mining problem with dynamic programming.

Initialize the DP table → Put the initial value in the first column → Check the DP table one by one and update the DP table

![Gold Mine_3](/assets/img/coding-test/gold-mine_3.png){:width=&quot;80%&quot;}

Iteration....the maximum value in the rightmost column is the correct answer required by the problem.

~~~py
# Python
for tc in range(int( input( ))):
  #Enter gold mine information.
  n, m = map(int, input( ). split( ))
  array = list(map(int, input( ). split( )))
  #Initialize 2D DP table for dynamic programming
  dp = [ ]
  indx = 0
  for i in range(n):
    dp. append(array[index: index+m]) Slices in units of # m and puts it in the dp table.
      index += m

    #Dynamic programming progress (bottom up)
  for j in range(1, m): # By column, check each column while moving
    for i in range(n):  
    # If it comes from the top left
      if i == 0: left_up = 0 #If out of index, corresponding value=0
      else: left_up = dp[ i-1 ][ j-1 ]
     #If it comes from the bottom left
      if i == n-1: left_down = 0 #If out of index, corresponding value=0
      else: left_down = dp[ i+1 ][ j-1 ]

     #if coming from the left
      left = dp[ i ][ j-1 ]

      dp[ i ][ j ] = dp[ i ][ j ] + max( left_up, left_down, left ) #Currently buried gold value + the largest of the three

  result = 0
  for i in range(n): # Among the values ​​recorded in the rightmost column, ? If you don't understand, check Lesson 6 58:36
      result = max( result, dp[ i ][ m-1 ] ) # find the largest value
  print( result )
~~~

#### 6.5.6 Problem : Deploying soldiers

N soldiers are randomly listed. Each soldier has a certain value of combat power. When deploying soldiers, we want to arrange them in descending order so that the soldiers with higher combat power are in the front.&lt;br&gt;
In other words, the combat power of the soldier in the front must always be higher than that of the soldier in the back.&lt;Br&gt;
Also, in the deployment process, a method of alienating soldiers in a specific position is used.&lt;br&gt;
Still, I want to maximize the number of remaining soldiers.&lt;Br&gt;

For example, it is assumed that the combat power of the listed soldiers when N=7 is as follows.
![Deploying Soldiers_1](/assets/img/coding-test/deploying_soldiers_1.png){:width=&quot;80%&quot;}

At this time, if the 3rd and 6th soldiers are excluded, the number of remaining soldiers will be in descending order as follows, and the number will be 5.&lt;BR&gt;
This is a way to maximize the number of remaining soldiers.
![Deploying Soldiers_2](/assets/img/coding-test/deploying_soldiers_2.png){:width=&quot;60%&quot;}

Write a program that, given information about soldiers, prints the number of soldiers that must be excluded in order to maximize the number of remaining soldiers.

**Difficulty: 1.5 \| 40 minutes to solve \| Time limit 1 seconds \| Memory limit 356 MB**
{:.message}

**Input conditions** &lt;br&gt;
The first line is given N. (1&lt;= N &lt;=2,000) &lt;br&gt;
In the second line, the combat power of each soldier is given in turn, separated by spaces. &lt;br&gt;
Each soldier's Combat Strength is a natural number less than or equal to 10,000,000.

**Output conditions** &lt;br&gt;
The number of soldiers remaining in the first row. &lt;br&gt;
Outputs the number of soldiers that must be excluded to maximize.

#### 6.5.7 Solution : Deploying soldiers

The basic idea of ​​this problem is the same as that of a classic dynamic programming problem known as &lt;span style='background-color:#e0ffc4'&gt;***Longest Increasing Subsequence (LIS)***&lt;span&gt;

For example, let's say we have a single sequence array = {4, 2, 5, 8, 4, 11, 15}.&lt;Br&gt; The longest increasing subsequence of this sequence is {4, 5, 8, 11, 15}. 

Since this problem can be replaced with the problem of finding the longest decreasing subsequence, the correct answer can be derived by applying the LIS algorithm with a slight modification.

Let's check the longest increasing subsequence (LIS) algorithm. &lt;br&gt;
*We define D[i] = the maximum length of a subsequence with array[i] as the last element.*&lt;br&gt;
The ignition formula is as follows.

For all 0 &lt;= j &lt; i , elements i, j &lt;br&gt;
D[i] = max(D[i], D[j]+1 ) Update according to the ignition formula (the larger of the current value vs. the previous value+1)

if array[j] &lt; array[i] if the preceding element (j) is less than the following element (i) (increasing form)
![Deploying Soldiers_3](/assets/img/coding-test/deploying_soldiers_3.png){:width=&quot;80%&quot;}

Reverses the order of the soldier information input first.&lt;br&gt;
The correct answer is derived by performing the longest increasing subsequence (LIS) algorithm.

~~~py
# Python
n = int(input( ))
array = list(map(int, input( ).split( )))
# Reverse the order and transform it into a 'longest increasing subsequence' problem
array.reverse( )

#Initialize one-dimensional DP table for dynamic programming
dp = [1] * n

#Perform the longest increasing subsequence (LIS) algorithm
for i in range(1, n): #from the second element to the last element
  for j in range(0, i): #All elements before (j) = from the first element to before i
    if array[ j ] &lt; array[ i ]: #only if small
      dp[ i ] = max( dp[ i ], dp[ j ]+1 ) #ignition expression

# Print the minimum number of soldiers to be excluded
print(n - max(dp)) # Subtract the value from all n
~~~





[https://www.freecodecamp.org/](https://www.freecodecamp.org/){:target=&quot;_blank&quot;}&lt;br&gt;
[https://www.programiz.com/](https://www.programiz.com/){:target=&quot;_blank&quot;}&lt;br&gt;
[https://www.geeksforgeeks.org/](https://www.geeksforgeeks.org/){:target=&quot;_blank&quot;}&lt;br&gt;
[https://blog.naver.com/PostList.naver?blogId=ndb796](https://blog.naver.com/PostList.naver?blogId=ndb796){:target=&quot;_blank&quot;}&lt;br&gt;
이것이 코딩테스트다,2020,나동빈,한빛미디어
{:.note title=&quot;reference&quot;}</content><author><name>Byungchan Park</name><email>prettygood236@gmail.com</email></author><category term="data-structures-and-algorithms" /><category term="algorithms" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/data-structures-and-algorithms/dynamic-programming_main.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/data-structures-and-algorithms/dynamic-programming_main.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">5. Binary Search</title><link href="http://localhost:4000/data-structures-and-algorithms/binary-search.html" rel="alternate" type="text/html" title="5. Binary Search" /><published>2022-02-15T00:00:00+09:00</published><updated>2022-02-15T00:00:00+09:00</updated><id>http://localhost:4000/data-structures-and-algorithms/binary-search</id><content type="html" xml:base="http://localhost:4000/data-structures-and-algorithms/binary-search.html">* toc
{:toc .large-only}

## 5. Binary Search

### 5.1 What is Binary Search?

***Sequential Search*** : A method of *&lt;span style='font-size:1.1em; background-color: #FFF39B'&gt;checking data one by one from the front &lt;/span&gt;*to find specific data in a list

*&lt;span style='background-color: #E0FFC4'&gt;**Binary Search**&lt;/span&gt;* : A method of *&lt;span style='font-size:1.1em; background-color: #FFF39B'&gt;searching for data in a sorted list by halving the search range.&lt;/span&gt;*
- Binary search sets the search range using the starting point, the ending point, and the midpoint.

**[Step 1]** Start point: 0, End point: 9, Mid point: 4 (remove decimal point)
![Binery Search_1](/assets/img/data-structures-and-algorithms/binary-search_1.png)

Comparing the midpoint value with the value to be found, if the midpoint value is larger, there is no need to check the midpoint to the right end.
Move the end point in front of the midpoint.

**[Step 2]** Start point: 0, End point: 3, Mid point: 1 (remove decimal point)
![Binery Search_2](/assets/img/data-structures-and-algorithms/binary-search_2.png)

If the midpoint value is smaller than the midpoint value and the value to be found, there is no need to check the midpoint to the left end.
Move the starting point behind the midpoint.

 
**[Step 3]** Start point:2, End point:3, Mid point: 2 (remove decimal point)
![Binery Search_3](/assets/img/data-structures-and-algorithms/binary-search_3.png)

Since we found the value we are looking for at the starting point, we end our search.

### 5.2 Time complexity of Binary Search

Since each step is equivalent to dividing the search range by 2, **the number of operations is proportional to $$\bf{log_2N}$$.**

For example, when the initial number of data is 32, 
- After step 1, ideally only 16 pieces of data are left.
- After step 2, only about 8 pieces of data remain.
- After step 3, only about 4 pieces of data are left.

In other words, binary search cuts the search range by half, and the time complexity is guaranteed to be $$\underline{O(logN)}$$.

### 5.3 Binary Search Implementation

**Recursive Implementation**
~~~py
# Python
def binary_search(array, target, start, end):
    if start &gt; end:
        return None
    mid = (start + end) // 2
    # Convert midpoint index if found
    if array[mid] == target:
        return mid
    # If the value you want to find is less than the value of the midpoint, check the left
    elif array[mid] &gt; target:
        return binary_search(array, target, start, mid - 1)
    # If the value you want to find is greater than the value of the midpoint, check the right
    else:
        return binary_search(array, target, mid + 1, end)

# Get n (number of elements) and target (value to find)
n, target = list(map(int, input(). split()))
# Get all elements input
array = list(map(int, input(). split()))

# Output the result of binary search
result = binary_search(array, target, 0, n - 1)
if result == None:
    print(&quot;The element does not exist.&quot;)
else:
    print(result + 1)
~~~

**Loop Implementation**
~~~py
# Python
def binary_search(array, target, start, end):
    while start &lt;= end:
        mid = (start + end) // 2
        # return midpoint index if found
        if array[mid] == target:
            return mid
        # If the value you want to find is less than the value of the midpoint, check the left
        elif array[mid] &gt; target:
            end = mid - 1
        # If the value you want to find is greater than the value of the midpoint, check the right
        else:
            start = mid + 1
    return None

# Get n (number of elements) and target (value to find)
n, target = list(map(int, input(). split()))
# Get all elements input
array = list(map(int, input(). split()))

# Output the result of binary search
result = binary_search(array, target, 0, n - 1)
if result == None:
    print(&quot;The element does not exist.&quot;)
else:
    print(result + 1)
~~~
 
### 5.4 Python Binary Search Library

**bisect_left( a, x )**: returns the leftmost index at which to insert x into array a while maintaining sorted order &lt;br&gt;
**bisect_right( a, x )**: returns the rightmost index at which to insert x into array a while maintaining sorted order

~~~py
from bisect import bisect_left, bisect_right

a = [1, 2, 4, 4, 8]
x = 4

print( bisect_left( a, x ) ) (output) 2

print( bisect_right( a, x ) ) (output) 4
~~~
 
Count the number of data whose values ​​fall within a specific range

~~~py
from bisect import bisect_left, bisect_right

#Function returning the number of data whose values ​​are [ left_value, right_value ]
def count_by_range( a, left_value, right_value ):
    right_index = bisect_right( a, right_value )
    left_index = bisect_left( a, left_value )
    return right_index - left_index
 
#declare an array
a = [1, 2, 3, ,3, 3, 3, 4, 4, 8, 9]

#Output the number of data whose value is 4
print( count_by_range(a, 4, 4) ) (output) 2

#Output the number of data whose value is in the range [-1, 3]
print( count_by_range( a, -1, 3) ) (output) 6
~~~

### 5.5 What is Parametric Search?

&lt;span style='background-color: #E0FFC4'&gt;***Optimization problem***&lt;/span&gt; is a problem of reducing the value of a function as low as possible or increasing it as much as possible.

Parametric search is a technique for &lt;span style='font-size:1.1em; background-color: #FFF39B'&gt;*solving an optimization problem into a decision problem (yes or no)*&lt;/span&gt;. 

Example: An optimization problem that quickly finds the most appropriate value that satisfies a specific condition

In general, the parametric search problem in coding tests **can be solved using binary search**.


### 5.6 Binery Search Example Problem

#### 5.6.1 Problem : Making tteokbokki rice cakes

Today, Chan decided to work in a rice cake shop on behalf of her parents who were traveling. Today is the day to make tteokbokki rice cakes. Interestingly, the length of the tteokbokki rice cake is not uniform. Instead, the total length of the rice cakes in one bag is cut with a cutter and adjusted.

If you designate the height (H) on the cutter, it cuts the rice cakes in a row at once. Mochi with a height greater than H will be cut off the part above H, and the lower mochi will not be cut.

For example, if you have rice cakes with heights of 19, 14, 10, and 17 cm side by side and you specify a cutter height of 15 cm, the height of the rice cakes after cutting will be 15, 14, 10, and 15 cm. The lengths of the cut rice cakes are 4, 0, 0, and 2 cm in sequence. The customer takes a length of 6 cm.

Write &lt;u&gt;a program to find the maximum value of the height that can be set in the cutter to obtain at least M rice cakes&lt;/u&gt; when the total length requested by the customer is M.

**Difficulty: 2 \| 40 minutes to solve \| Time limit 2 seconds \| Memory limit 128 MB**
{:.message}

**Input conditions** &lt;br&gt;
In the first line, the number of loaves N and the requested length M are given. (1 &lt;=N &lt;=1,000,000, 1 &lt;=M &lt;=2,000,000,000 ) &lt;br&gt;
In the second row, the individual heights of the rice cakes are given. Since the sum of the heights of rice cakes is always greater than M, the customer can buy as many rice cakes as they need. &lt;br&gt;
The height is a positive integer less than or equal to one billion, or zero.

**Output conditions** &lt;br&gt;
Prints the maximum value of the height that can be set on the cutter to take home at least M rice cakes.


#### 5.6.2 Solution : Making tteokbokki rice cakes

Just adjust the height H iteratively by performing a binary search until a suitable height is found. (The higher the H, the smaller the truncated value.)

After checking &quot;Can the condition be satisfied by cutting at this height?&quot;, it can be solved by narrowing the search scope according to whether the condition is satisfied (yes or no).

The height of the cutter is an integer from 0 to 1 billion.

***When looking at such a large search scope, the first thing that comes to mind is binary search.***

**[Step 1]** Start point: 0, End point: 19, Mid point: 9 (=H, cutting height)
![Making tteokbokki rice cakes_1](/assets/img/coding-test/making-tteokbokki-rice-cakes_1.png)

At this time, the required size of the rice cake: M = 6, so the length of the cut rice cake 25 satisfies the minimum. -&gt; **Save result** &lt;br&gt;
Move the starting point behind the midpoint.

**[Step 2]** Start Point: 10, End Point: 19, Mid Point: 14 (=H, Cutting Height)
![Making tteokbokki rice cakes_2](/assets/img/coding-test/making-tteokbokki-rice-cakes_2.png)

At this time, the required size of the rice cake: M = 6, so the length of the cut rice cake 9 satisfies the minimum. -&gt; **Save result** &lt;br&gt;
Move the starting point behind the midpoint. (midpoint+1)

**[Step 3]** Start Point: 15, End Point: 19, Mid Point: 17 (=H, Cutting Height)
![Making tteokbokki rice cakes_3](/assets/img/coding-test/making-tteokbokki-rice-cakes_3.png)
 
At this time, the required size of rice cake: M = 6, so the length of the cut rice cake 2 does not satisfy the minimum. -&gt; **Do not save results** &lt;br&gt;
Move the endpoint before the midpoint (midpoint -1).

**[Step 4]** Start Point: 15, End Point: 16, Mid Point: 15
![Making tteokbokki rice cakes_4](/assets/img/coding-test/making-tteokbokki-rice-cakes_4.png)

At this time, the required size of rice cake: M = 6, so the length of the cut rice cake 6 satisfies the customer's desired length. -&gt; **Save result**

Until we can't further reduce the search scope using binary search
The optimal solution is obtained by changing the starting and ending points, changing H (= midpoint) each time, and checking whether the condition is satisfied when cutting to the current height.

By repeating this binary search process, an answer can be derived.

Since the value of the midpoint becomes an optimized value over time, record the value of the midpoint whenever the sum of the lengths of rice cakes obtained by repeating the process is greater than or equal to the required length of rice cakes (=M). .

~~~py
# Python
#Enter the number of rice cakes (N) and the requested length of rice cakes (M)
n, m = list( map( int, input() . split( ' ' ))))
#Enter the individual height information of each rice cake
array = list( map( int, input() . split( ' ' ))))

#Set start and end points for binary search
start = 0
end = max( array ) #length of longest rice cake

#Perform binary search (repeat)
result = 0
while( start &lt;=end ):
    total = 0
    mid = (start + end) // 2
    for x in array:
        #Calculation of the amount of rice cakes when cut
        if x &gt; mid: #When the length (x) of the current rice cake is greater than the height
            total += x - mid # Put the cut rice cake into the total variable.
    #If the amount of rice cake is insufficient, cut more (Explore the left part)
    if total &lt; m:
        end = mid -1 #end point forward midpoint
    #If the amount of rice cake is sufficient, cut less (search for the right part)
    else:
        result = mid #The answer is when it is cut as small as possible, so record it in the result here
        start = mid + 1 #Move the start point behind the midpoint

#print the correct answer
print( result )
~~~

#### 5.6.3 Problem : Count a specific number in a sorted array

A sequence containing N elements is sorted in ascending order. &lt;u&gt;Count the number of times x appears in this sequence&lt;/u&gt;. For example, if there is a sequence {1, 1, 2, 2, 2, 2, 3} and x=2, 4 is output because there are 4 elements with a value of 2 in the current sequence.

However, if the algorithm is not designed with a time complexity of $$O(logN)$$, this problem is judged to be time-out.

**Difficulty: 2 \| 30 minutes to solve \| Time limit 1 seconds \| Memory limit 128 MB \|Previous Zoho interview****
{:.message}

**Input conditions** &lt;br&gt;
In the first line, N and x are entered in the form of integers separated by spaces. &lt;br&gt;
(1 &lt;= N&lt;=1,000,000), (-109 &lt;= x &lt;=109 ) &lt;br&gt;
In the second line, N elements are entered in the form of integers separated by spaces.&lt;br&gt;

**Output conditions** &lt;br&gt;
Outputs the number of elements whose value is x among the elements of a sequence. However, if there is no element with the value x, -1 is output.

#### 5.6.4 Solution : Count a specific number in a sorted array

An algorithm that operates with a time complexity of $$O(logN)$$ is required.
- In general linear search, it is judged as timeout.
- But since the data is sorted, we can do a binary search.

![Count a specific number in a sorted array](/assets/img/coding-test/count-a-specific-number-in-a-sorted-array.png)


You can solve the problem by finding the first and last positions where a specific value (x) appears and calculating the position difference.
Binary search is performed twice over the entire search range. Makes you find the first location, the last location.

~~~py
# Python
from bisect import bisect_left, bisect_right

#Function that returns the number of data whose values ​​are [left_value, right_value]
def count_by_range( array, left_value, right_value ):
    right_index = bisect_right( array, right_value )
    left_index = bisect_left( array, left_value )
    return right_index - left_index #left_value or more and right_value or less

n, x = map( int, input() .split( )) # Get the number of data N, the value x to find
array = list( map( int, input() .split( ))) #Get all data input

#Count the number of data whose values ​​are in the range [x, x] = Just count the number of x
count = count_by_range( array, x, x )

#if the element with value x does not exist
if count == 0:
    print(-1)
#if there is an element with value x
else:
    print( count )
~~~


[https://www.freecodecamp.org/](https://www.freecodecamp.org/){:target=&quot;_blank&quot;}&lt;br&gt;
[https://www.programiz.com/](https://www.programiz.com/){:target=&quot;_blank&quot;}&lt;br&gt;
[https://www.geeksforgeeks.org/](https://www.geeksforgeeks.org/){:target=&quot;_blank&quot;}&lt;br&gt;
[https://blog.naver.com/PostList.naver?blogId=ndb796](https://blog.naver.com/PostList.naver?blogId=ndb796){:target=&quot;_blank&quot;}&lt;br&gt;
이것이 코딩테스트다,2020,나동빈,한빛미디어
{:.note title=&quot;reference&quot;}</content><author><name>Byungchan Park</name><email>prettygood236@gmail.com</email></author><category term="data-structures-and-algorithms" /><category term="algorithms" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/data-structures-and-algorithms/binary-search_main.png" /><media:content medium="image" url="http://localhost:4000/assets/img/data-structures-and-algorithms/binary-search_main.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">4. Sort</title><link href="http://localhost:4000/data-structures-and-algorithms/sort.html" rel="alternate" type="text/html" title="4. Sort" /><published>2022-02-12T00:00:00+09:00</published><updated>2022-02-12T00:00:00+09:00</updated><id>http://localhost:4000/data-structures-and-algorithms/sort</id><content type="html" xml:base="http://localhost:4000/data-structures-and-algorithms/sort.html">&lt;ul class=&quot;large-only&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#4-sort&quot; id=&quot;markdown-toc-4-sort&quot;&gt;4. Sort&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#41-selection-sort&quot; id=&quot;markdown-toc-41-selection-sort&quot;&gt;4.1 Selection Sort&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#411-what-is-selection-sort&quot; id=&quot;markdown-toc-411-what-is-selection-sort&quot;&gt;4.1.1 What is Selection Sort?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#412-selection-sort-implementation&quot; id=&quot;markdown-toc-412-selection-sort-implementation&quot;&gt;4.1.2 Selection Sort Implementation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#413-time-complexity-of-selection-sort&quot; id=&quot;markdown-toc-413-time-complexity-of-selection-sort&quot;&gt;4.1.3 Time complexity of Selection Sort&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#42-insertion-sort&quot; id=&quot;markdown-toc-42-insertion-sort&quot;&gt;4.2 Insertion Sort&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#421-what-is-insertion-sort&quot; id=&quot;markdown-toc-421-what-is-insertion-sort&quot;&gt;4.2.1 What is Insertion Sort?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#422-insertion-sort-implementation&quot; id=&quot;markdown-toc-422-insertion-sort-implementation&quot;&gt;4.2.2 Insertion Sort Implementation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#423-time-complexity-of-insertion-sort&quot; id=&quot;markdown-toc-423-time-complexity-of-insertion-sort&quot;&gt;4.2.3 Time complexity of Insertion Sort&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#43-quick-sort&quot; id=&quot;markdown-toc-43-quick-sort&quot;&gt;4.3 Quick Sort&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#431-what-is-quick-sort&quot; id=&quot;markdown-toc-431-what-is-quick-sort&quot;&gt;4.3.1 What is Quick Sort?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#432-quick-sort-implementation&quot; id=&quot;markdown-toc-432-quick-sort-implementation&quot;&gt;4.3.2 Quick Sort Implementation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#433-time-complexity-of-quick-sort&quot; id=&quot;markdown-toc-433-time-complexity-of-quick-sort&quot;&gt;4.3.3 Time complexity of Quick Sort&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#44-counting-sort&quot; id=&quot;markdown-toc-44-counting-sort&quot;&gt;4.4 Counting Sort&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#441-what-is-counting-sort&quot; id=&quot;markdown-toc-441-what-is-counting-sort&quot;&gt;4.4.1 What is Counting Sort?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#442-counting-sort-implementation&quot; id=&quot;markdown-toc-442-counting-sort-implementation&quot;&gt;4.4.2 Counting Sort Implementation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#443-time-complexity-of-counting-sort&quot; id=&quot;markdown-toc-443-time-complexity-of-counting-sort&quot;&gt;4.4.3 Time complexity of Counting Sort&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#45-merge-sort&quot; id=&quot;markdown-toc-45-merge-sort&quot;&gt;4.5 Merge Sort&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#451-what-is-merge-sort&quot; id=&quot;markdown-toc-451-what-is-merge-sort&quot;&gt;4.5.1 What is Merge Sort?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#452-merge-sort-implementation&quot; id=&quot;markdown-toc-452-merge-sort-implementation&quot;&gt;4.5.2 Merge Sort Implementation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#453-time-complexity-of-merge-sort&quot; id=&quot;markdown-toc-453-time-complexity-of-merge-sort&quot;&gt;4.5.3 Time complexity of Merge Sort&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#46-sort-algorithm-comparison&quot; id=&quot;markdown-toc-46-sort-algorithm-comparison&quot;&gt;4.6 Sort Algorithm Comparison&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#47-sort-example-problem&quot; id=&quot;markdown-toc-47-sort-example-problem&quot;&gt;4.7 Sort Example Problem&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#471-problem--swapping-elements-in-two-arrays&quot; id=&quot;markdown-toc-471-problem--swapping-elements-in-two-arrays&quot;&gt;4.7.1 Problem : Swapping elements in two arrays&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#472-solution--swapping-elements-in-two-arrays&quot; id=&quot;markdown-toc-472-solution--swapping-elements-in-two-arrays&quot;&gt;4.7.2 Solution : Swapping elements in two arrays&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-sort&quot;&gt;4. Sort&lt;/h2&gt;

&lt;p&gt;Sorting is &lt;em&gt;&lt;u&gt;arranging data in order according to a specific criterion.&lt;/u&gt;&lt;/em&gt; &lt;br /&gt;
In general, an appropriate sorting algorithm is used as a formula according to the problem situation.&lt;/p&gt;

&lt;h3 id=&quot;41-selection-sort&quot;&gt;4.1 Selection Sort&lt;/h3&gt;

&lt;h4 id=&quot;411-what-is-selection-sort&quot;&gt;4.1.1 What is Selection Sort?&lt;/h4&gt;

&lt;p&gt;It repeats &lt;em&gt;&lt;span style=&quot;font-size:1.1em; background-color: #FFF39B&quot;&gt;&lt;strong&gt;&lt;u&gt;selecting&lt;/u&gt;&lt;/strong&gt; the smallest data among the unprocessed data and replacing it with the first data.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 0]&lt;/strong&gt; &lt;br /&gt;
Select &lt;u&gt;the smallest 0&lt;/u&gt; among unprocessed data and replace it with &lt;u&gt;the leading 7&lt;/u&gt;.
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/selection-sort_1.png&quot; alt=&quot;Selection Sort_1&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 1]&lt;/strong&gt; &lt;br /&gt;
Select &lt;u&gt;the smallest 1&lt;/u&gt; among unprocessed data and replace it with &lt;u&gt;the leading 5&lt;/u&gt;.
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/selection-sort_2.png&quot; alt=&quot;Selection Sort_2&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 2]&lt;/strong&gt; &lt;br /&gt;
Select &lt;u&gt;the smallest 2&lt;/u&gt; among unprocessed data and replace it with &lt;u&gt;the leading 9&lt;/u&gt;.
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/selection-sort_3.png&quot; alt=&quot;Selection Sort_3&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 3]&lt;/strong&gt; &lt;br /&gt;
Select &lt;u&gt;the smallest 3&lt;/u&gt; among unprocessed data and replace it with &lt;u&gt;the the leading 7&lt;/u&gt;.
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/selection-sort_4.png&quot; alt=&quot;Selection Sort_4&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 8]&lt;/strong&gt; &lt;br /&gt;
If this process is repeated, &lt;u&gt;the sorting is completed&lt;/u&gt; as follows.
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/selection-sort_5.png&quot; alt=&quot;Selection Sort_5&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The search range decreases with each iteration. Each time, the data is checked as far as the search range to find the smallest element. It is equivalent to doing a &lt;u&gt;linear search&lt;/u&gt; every time.&lt;/p&gt;

&lt;h4 id=&quot;412-selection-sort-implementation&quot;&gt;4.1.2 Selection Sort Implementation&lt;/h4&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Python
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# i is the smallest data and the index to change position = the frontmost position each time
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;min_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#index of the smallest element, put the smallest element first
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# j starts a linear search (from the next index)
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#if there is an index smaller than the current smallest element
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;min_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Make the position index value come to the smallest index value
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# swap, swap the first and smallest elements
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# output
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;413-time-complexity-of-selection-sort&quot;&gt;4.1.3 Time complexity of Selection Sort&lt;/h4&gt;

&lt;p&gt;Selection sort must find the smallest number N times and send it to the front.&lt;/p&gt;

&lt;p&gt;There may be minor errors depending on the implementation method, but the total number of operations is as follows.&lt;/p&gt;

&lt;p&gt;\(N + (N -1) + (N - 2) + ... + 2\) (in arithmetic sequence form)&lt;/p&gt;

&lt;p&gt;This can be expressed as \((N^2 + N - 2) / 2\) , which is written as \(\underline{O(N^2)}\) according to Big O notation.&lt;/p&gt;

&lt;h3 id=&quot;42-insertion-sort&quot;&gt;4.2 Insertion Sort&lt;/h3&gt;

&lt;h4 id=&quot;421-what-is-insertion-sort&quot;&gt;4.2.1 What is Insertion Sort?&lt;/h4&gt;

&lt;p&gt;It picks out the unprocessed data one by one and &lt;em&gt;&lt;span style=&quot;font-size:1.1em; background-color: #FFF39B&quot;&gt;&lt;strong&gt;&lt;u&gt;inserts&lt;/u&gt;&lt;/strong&gt; them in the appropriate places.&lt;/span&gt;&lt;/em&gt; &lt;br /&gt;
It is more difficult to implement than selection sort, but it is generally more efficient.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 0]&lt;/strong&gt; &lt;br /&gt;
It is judged that the first data 7 is sorted by itself, and the position of the second data 5 is determined. There are only two cases, either going to the left of 7 or going to the right. &lt;br /&gt;
&lt;u&gt;5 is smaller, so it goes to the left.&lt;/u&gt;
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/insertion-sort_1.png&quot; alt=&quot;Insertion Sort_1&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 1]&lt;/strong&gt; &lt;br /&gt;
Then, it is decided which position the 9 is going. &lt;br /&gt;
&lt;u&gt;9 is bigger, so it goes right.&lt;/u&gt;
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/insertion-sort_2.png&quot; alt=&quot;Insertion Sort_2&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 2]&lt;/strong&gt; &lt;br /&gt;
Then, it is determined where the 0 is going. &lt;br /&gt;
&lt;u&gt;Since 0 is less than 5, it is shifted to the left.&lt;/u&gt;
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/insertion-sort_3.png&quot; alt=&quot;Insertion Sort_3&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 8]&lt;/strong&gt; &lt;br /&gt;
If this process is repeated, the sorting is completed as follows.
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/insertion-sort_5.png&quot; alt=&quot;Insertion Sort_5&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;422-insertion-sort-implementation&quot;&gt;4.2.2 Insertion Sort Implementation&lt;/h4&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Python
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# iterate starting from the second element
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Grammar that repeats decreasing by 1 from index i to 1, where j is the position of the element to be inserted
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#if it is less than the left
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#swapping, reposition = move left
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#if it is greater than or equal to left
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#stop
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# output
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;423-time-complexity-of-insertion-sort&quot;&gt;4.2.3 Time complexity of Insertion Sort&lt;/h4&gt;

&lt;p&gt;The time complexity of insertion sort is \(\underline{O(N^2)}\), and like selection sort, the loop is used twice.&lt;/p&gt;

&lt;p&gt;Insertion sort &lt;u&gt;works very quickly if the data in the current list is almost sorted.&lt;/u&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It has a time complexity of \(\underline{O(N)}\) &lt;u&gt;in the best case.&lt;/u&gt;&lt;/li&gt;
  &lt;li&gt;What happens if you perform insertion sort again while already sorted? &lt;br /&gt;-&amp;gt; &lt;em&gt;&lt;span style=&quot;font-size:1em; background-color: #FFF39B&quot;&gt;Stops immediately while performing the search.&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;43-quick-sort&quot;&gt;4.3 Quick Sort&lt;/h3&gt;

&lt;h4 id=&quot;431-what-is-quick-sort&quot;&gt;4.3.1 What is Quick Sort?&lt;/h4&gt;

&lt;p&gt;This is a method of &lt;em&gt;&lt;u&gt;setting the reference data&lt;/u&gt;&lt;/em&gt; and &lt;em&gt;&lt;span style=&quot;font-size:1.1em; background-color: #FFF39B&quot;&gt;changing the positions of larger and smaller data than the standard.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is one of the most used sorting algorithms in general situations.
Along with merge sort, it is an algorithm that is the basis of sort libraries in most programming languages.&lt;/p&gt;

&lt;p&gt;The most basic quick sort &lt;em&gt;&lt;span style=&quot;font-size:1em; background-color: #FFF39B&quot;&gt;sets the first data as the reference data (Pivot).&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 0]&lt;/strong&gt; &lt;br /&gt;
The current pivot value is 5. Since data larger than 5 is selected from the left, 7 is selected, and since data smaller than 5 is selected from the right, 4 is selected. Now we swap the positions of these two data.
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/quick-sort_1.png&quot; alt=&quot;Quick Sort_1&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 1]&lt;/strong&gt; &lt;br /&gt;
The current pivot value is 5. Since data larger than 5 is selected from the left, 9 is selected, and since data smaller than 5 is selected from the right, 2 is selected. Now, the positions of the two data are changed to each other.
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/quick-sort_2.png&quot; alt=&quot;Quick Sort_2&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 2]&lt;/strong&gt; &lt;br /&gt;
The current pivot value is 5. Since data larger than 5 is selected from the left, 6 is selected, and since data smaller than 5 is selected from the right, 1 is selected. &lt;br /&gt;
However, &lt;strong&gt;&lt;em&gt;if the positions are staggered like this, the positions of the pivot and small data are changed.&lt;/em&gt;&lt;/strong&gt;
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/quick-sort_3.png&quot; alt=&quot;Quick Sort_3&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Divide complete]&lt;/strong&gt; &lt;br /&gt;
Now, the data to the left of 5 are all less than 5, and the data to the right are all greater than 5. This &lt;em&gt;&lt;u&gt;operation of dividing the data bundle based on the pivot&lt;/u&gt;&lt;/em&gt; is called divide.
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/quick-sort_4.png&quot; alt=&quot;Quick Sort_4&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Left Data Bundle Sort]&lt;/strong&gt; &lt;br /&gt;
Quick sort is performed on the data on the left in the same way.
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/quick-sort_5.png&quot; alt=&quot;Quick Sort_5&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Performed recursively. Every time you do quicksort, the sorting range gets narrower.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Right Data Bundle Sort]&lt;/strong&gt; &lt;br /&gt;
Quick sort is performed on the data on the right in the same way.
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/quick-sort_6.png&quot; alt=&quot;Quick Sort_6&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If this process is repeated, sorting is performed on all data.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Quick Sort is Fast?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the ideal case, if the division occurs by half, \(O(NlogN)\) can be expected for the total number of operations.
\(Width \times height = N \times logN = NlogN\)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/data-structures-and-algorithms/quick-sort_7.png&quot; alt=&quot;Quick Sort_7&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;432-quick-sort-implementation&quot;&gt;4.3.2 Quick Sort Implementation&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Implementation in a usual way&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Python
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#end if 1 element
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (otherwise) pivot is the first element
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#set left
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#set right
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Repeat until crossed
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# iterate until we find data larger than the pivot
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# iterate until we find data smaller than the pivot
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#if it crossed
&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Swap the pivot with small data
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#if not crossed
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Swap small and large data
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Perform sorting on the left part and the right part after division
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# output
# [0, 1, 2, 3, 4, 5, 6, 7, 8 ,9]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Implementation in a way that takes advantage of Python’s strengths&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Python
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# quit if list contains no more than one element
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#The pivot is the first element
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#List without pivot (make a list from the 2nd element to the last element)
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;left_side&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (if less than pivot value) the divided left part
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;right_side&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# (if greater than pivot value) divided right part
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# After dividing, sort the left and right parts, respectively, and return the entire list
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left_side&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right_side&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# output
# [0, 1, 2, 3, 4, 5, 6, 7, 8 ,9]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;433-time-complexity-of-quick-sort&quot;&gt;4.3.3 Time complexity of Quick Sort&lt;/h4&gt;

&lt;p&gt;Quicksort has a time complexity of \(\underline{O(NlogN)}\) in case of average. &lt;br /&gt;
However, it has a time complexity of \(\underline{O(N^2)}\) &lt;u&gt;in the worst case.&lt;/u&gt;&lt;br /&gt;
What happens if you perform quicksort on an already sorted array when the first element is pivoted?
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/quick-sort_8.png&quot; alt=&quot;Quick Sort_8&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Segmentation in which only the right data remains is continued.&lt;/li&gt;
  &lt;li&gt;The number of divisions is N. (A linear search must be performed every time.)&lt;/li&gt;
  &lt;li&gt;Time complexity : \(N \times N =&amp;gt; O(N^2)\)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The programming default library is set to implement \(NlogN\) even in the worst case.&lt;/p&gt;

&lt;h3 id=&quot;44-counting-sort&quot;&gt;4.4 Counting Sort&lt;/h3&gt;

&lt;h4 id=&quot;441-what-is-counting-sort&quot;&gt;4.4.1 What is Counting Sort?&lt;/h4&gt;

&lt;p&gt;It is a &lt;strong&gt;&lt;em&gt;very fast sorting algorithm&lt;/em&gt;&lt;/strong&gt; that can only be used when certain conditions are met.&lt;/p&gt;

&lt;p&gt;Counting sort can be used when &lt;em&gt;&lt;span style=&quot;font-size:1.1em; background-color: #FFF39B&quot;&gt;the size range of data is limited and can be expressed in integer form.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When the number of data is N and the maximum value among data (positive numbers) is K, the execution time \(\underline{O(N + K)}\) &lt;u&gt;is guaranteed even in the worst case.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 0]&lt;/strong&gt; &lt;br /&gt;
Create a list to contain all the ranges from the smallest data to the largest data.&lt;br /&gt;
&lt;strong&gt;Data to sort by&lt;/strong&gt;: 7 5 9 0 3 1 6 2 9 1 4 8 0 5 2
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/counting-sort_1.png&quot; alt=&quot;Counting Sort_1&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Count the number of times each data appeared in total.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 1]&lt;/strong&gt; &lt;br /&gt;
Check the data one by one and increase the data of the same index as the data value by one. &lt;br /&gt;
&lt;strong&gt;Data to sort by&lt;/strong&gt;: &lt;strong&gt;&lt;u&gt;7&lt;/u&gt;&lt;/strong&gt; 5 9 0 3 1 6 2 9 1 4 8 0 5 2
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/counting-sort_2.png&quot; alt=&quot;Counting Sort_2&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 2]&lt;/strong&gt; &lt;br /&gt;
Check the data one by one and increase the data of the same index as the data value by one. &lt;br /&gt;
&lt;strong&gt;Data to sort by&lt;/strong&gt;: 7 &lt;strong&gt;&lt;u&gt;5&lt;/u&gt;&lt;/strong&gt; 9 0 3 1 6 2 9 1 4 8 0 5 2
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/counting-sort_3.png&quot; alt=&quot;Counting Sort_3&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Step 15]&lt;/strong&gt; &lt;br /&gt;
As a result, the number of times each data appears is recorded in the final list. &lt;br /&gt;
&lt;strong&gt;Data to sort by&lt;/strong&gt;: 7 5 9 0 3 1 6 2 9 1 4 8 0 5 &lt;strong&gt;&lt;u&gt;2&lt;/u&gt;&lt;/strong&gt;
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/counting-sort_4.png&quot; alt=&quot;Counting Sort_4&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When checking the result, the index is printed by repeating the value one by one from the first data in the list.
&lt;img src=&quot;/assets/img/data-structures-and-algorithms/counting-sort_5.png&quot; alt=&quot;Counting Sort_5&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output Result&lt;/strong&gt;: 0 0 1 1 2 2 3 4 5 5 6 7 8 9 9&lt;/p&gt;

&lt;p&gt;Although the space complexity is relatively high, it operates faster if the conditions are satisfied.&lt;/p&gt;

&lt;h4 id=&quot;442-counting-sort-implementation&quot;&gt;4.4.2 Counting Sort Implementation&lt;/h4&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Python
# Assume all elements are greater than or equal to 0
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#declare a list containing all ranges (all values ​​are initialized to 0)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Create a count array with a size of 10 from 0 to 9.
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Check the number of data (N)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Increase the index value corresponding to each data (record how many times it appears)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Check the sort information recorded in the list (check each index)
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# The number of executions of the inner loop is N.
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Print the index as many times as the number of occurrences separated by spaces
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# output
# 0 0 1 1 2 2 3 4 5 5 6 7 8 9 9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;443-time-complexity-of-counting-sort&quot;&gt;4.4.3 Time complexity of Counting Sort&lt;/h4&gt;

&lt;p&gt;Both the time and space complexity of Counting sort are \(\underline{O(N + K)}\). &lt;br /&gt;
(N: the number to be sorted) (K: the largest value among elements)&lt;/p&gt;

&lt;p&gt;Counting sorting can sometimes lead to serious inefficiencies.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Consider a case where there are only two data, 0 and 999,999. (You must create an array containing 1 million elements.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Counting sorting can be &lt;em&gt;&lt;span style=&quot;font-size:1em; background-color: #FFF39B&quot;&gt;effectively used when multiple data with the same value appear.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In the case of grades, there may be several students who scored 100 points, so sorting the counting sort is effective.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;45-merge-sort&quot;&gt;4.5 Merge Sort&lt;/h3&gt;

&lt;h4 id=&quot;451-what-is-merge-sort&quot;&gt;4.5.1 What is Merge Sort?&lt;/h4&gt;

&lt;p&gt;Merge sort divides one large problem into two smaller problems, computes each, and then merges them. That said, the basic idea is &lt;em&gt;&lt;span style=&quot;font-size:1.1em; background-color: #FFF39B&quot;&gt;to divide it exactly in half once and sort it later.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unlike quicksort, merge sort has no pivot value and always divides in half. This feature makes the step size logN.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/data-structures-and-algorithms/merge-sort_1.png&quot; alt=&quot;Merge Sort_1&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at the picture above. All of the 7 6 5 8 3 5 9 1s start out as individual arrays of size 1. Now, in the first step 1, each array is of size 2. It’s a combination of two things that used to be one size. If you look, you can see that in the first step 1 is divided by 6 7 / 5 8 / 3 5 / 1 9. Then the second step is to combine the ones of size 2 by two to create an array of size 4.&lt;/p&gt;

&lt;p&gt;In other words, &lt;u&gt;the sort is performed at the moment of merging.&lt;/u&gt; The merging step only takes 3 steps. The sum is 2^3 = 8 in the sense that the number doubles, so only 3 steps are needed.&lt;/p&gt;

&lt;h4 id=&quot;452-merge-sort-implementation&quot;&gt;4.5.2 Merge Sort Implementation&lt;/h4&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Python
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;c1&quot;&gt;# Finding the mid of the array
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# Dividing the array elements
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# into 2 halves
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# Sorting the first half
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# Sorting the second half
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  
        &lt;span class=&quot;c1&quot;&gt;# Copy data to temp arrays L[] and R[]
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

          &lt;span class=&quot;c1&quot;&gt;# Checking if any element was left
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Code to print the list
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
&lt;span class=&quot;c1&quot;&gt;# Driver Code
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Given array is&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sorted array is: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One thing to keep in mind when implementing merge sort is that the array used for sorting must be declared as a ‘global variable’. If you declare an array inside a function, the waste of memory resources can become very large in that you have to declare the array every time.&lt;/p&gt;

&lt;p&gt;As such, merge sort has the problem of inefficient memory utilization in that &lt;u&gt;additional array space to hold existing data is required&lt;/u&gt;. (Heap sort solves the memory inefficiency problem.)&lt;/p&gt;

&lt;p&gt;Merge sort is usually slower than quicksort, but is a very efficient algorithm in that it is guaranteed to be exactly \(O(N \times logN)\) under any circumstances.&lt;/p&gt;

&lt;h4 id=&quot;453-time-complexity-of-merge-sort&quot;&gt;4.5.3 Time complexity of Merge Sort&lt;/h4&gt;

&lt;p&gt;The size of the step is kept as logN when the number of data is N. Also, the execution time required for sorting itself is N. This is because you only need to calculate the number of data. As a result, the total time complexity is \(O(N \times logN)\).&lt;/p&gt;

&lt;p&gt;Why is the execution time required for sorting only N? Here’s why it only takes N to sort the subsets.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/data-structures-and-algorithms/merge-sort_2.png&quot; alt=&quot;Merge Sort_2&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The initial state is as above. In the left set, i points to the first element, and in the second set, j points to the second element. And the array to be sorted is empty. The reason the sort takes only N is the same reason as insertion sort. This is because it assumes that &lt;em&gt;&lt;u&gt;'the subset is already sorted'&lt;/u&gt;&lt;/em&gt;. This is because &lt;strong&gt;&lt;em&gt;the time complexity of O(N) is sufficient to combine two things that are already sorted.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/data-structures-and-algorithms/merge-sort_3.png&quot; alt=&quot;Merge Sort_3&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first process is to compare i and j as above, put a smaller number in the position of k, and add the processed index by one. As a result, you can see that k and j have moved to the right by one space as shown above.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/data-structures-and-algorithms/merge-sort_4.png&quot; alt=&quot;Merge Sort_4&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, comparing i = 6 and j = 8, 6 is smaller, so it is inserted at the k position and i and k are added by 1 each. The result is as above. If you iterate like this, you only need to &lt;strong&gt;&lt;em&gt;process exactly N times&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/data-structures-and-algorithms/merge-sort_5.png&quot; alt=&quot;Merge Sort_5&quot; class=&quot;width=&amp;quot;80%&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That is, as above, the width is N times and the height is log N times, which guarantees a time complexity of \(\underline{O(N \times logN)}\).&lt;/p&gt;

&lt;h3 id=&quot;46-sort-algorithm-comparison&quot;&gt;4.6 Sort Algorithm Comparison&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Sort Algorithms&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Average Time Complexity&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Space Complexity&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Feature&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Selection Sort&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(N^2)\)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(N)\)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;The idea is very simple.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Insertion Sort&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(N^2)\)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(N)\)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;It is fastest when the data is almost sorted.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Quick Sort&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(NlogN)\)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(N)\)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In most cases, it is the most joint, and it is fast enough&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Counting Sort&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(N+K)\)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(N)\)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;It can be used only when the size of the data is limited, but it works very quickly.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Merge Sort&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(NlogN)\)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\(O(N)\)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Memory usage is inefficient.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For reference, the standard sort library supported by most programming 
languages ​​is designed to guarantee O(NlogN) even in the worst case.&lt;/p&gt;

&lt;h3 id=&quot;47-sort-example-problem&quot;&gt;4.7 Sort Example Problem&lt;/h3&gt;

&lt;h4 id=&quot;471-problem--swapping-elements-in-two-arrays&quot;&gt;4.7.1 Problem : Swapping elements in two arrays&lt;/h4&gt;

&lt;p&gt;I have two arrays A and B. Both arrays consist of N elements, and the elements of the array are all natural numbers. &lt;br /&gt;
A maximum of K replacement operations can be performed. A replacement operation means selecting one element from array A and one element from array B and swapping the two elements.&lt;br /&gt;
The end goal is to maximize the sum of all elements of array A.
Given N, K, and information about arrays A and B, write a program that prints the maximum value of the sum of all elements of array A that can be made by performing at most K replacement operations.&lt;/p&gt;

&lt;p&gt;For example, say N = 5, K = 3, and the arrays A and B are as follows.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Array A = [1, 2, 5, 4, 3]&lt;/li&gt;
  &lt;li&gt;Array B = [5, 5, ,6, ,6, 5]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case, three operations can be performed as follows.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Operation 1) Swap element 1 of array A and element 6 of array B&lt;/li&gt;
  &lt;li&gt;Operation 2) Swap element 2 of array A and element 6 of array B&lt;/li&gt;
  &lt;li&gt;Operation 3) Swap element 3 of array A and element 5 of array B&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the three operations, the states of array A and array B are configured as follows.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Array A = [6, 6, 5, 4, 5]&lt;/li&gt;
  &lt;li&gt;Array B = [3, 5, 1, 2, 5]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this time, the sum of all elements of array A is 26, and the sum cannot be made larger than this.&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;&lt;strong&gt;Difficulty: 1 | 15 minutes to solve | Time limit 2 seconds | Memory limit 128 MB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input conditions&lt;/strong&gt; &lt;br /&gt;
In the first line, N and K are entered, separated by spaces. (1 &amp;lt;= N &amp;lt;= 100,000, 0 &amp;lt;=K &amp;lt;= N) &lt;br /&gt;
In the second line, the elements of array A are entered separated by spaces. All elements are natural numbers less than 10,000,000. &lt;br /&gt;
In the third line, the elements of array B are entered, separated by spaces. All elements are natural numbers less than 10,000,000.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output conditions&lt;/strong&gt; &lt;br /&gt;
Outputs the maximum value of the sum of all elements of the array A that can be created by performing the maximum K replacement operations.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Input Example&lt;/td&gt;
      &lt;td&gt;Output Example&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5 3&lt;/td&gt;
      &lt;td&gt;26&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1 2 5 4 3&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5 5 6 6 5&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;472-solution--swapping-elements-in-two-arrays&quot;&gt;4.7.2 Solution : Swapping elements in two arrays&lt;/h4&gt;

&lt;p&gt;The key idea: &lt;strong&gt;each time pick the smallest element from array A and replace it with the largest element from array B.&lt;/strong&gt; &lt;br /&gt;
First, given arrays A and B, sort in ascending order on A and sort in descending order on B.&lt;br /&gt;
Afterwards, the elements of the two arrays are checked sequentially from the first index, and replacement is performed only when the element of A is smaller than the element of B. &lt;br /&gt;
In this problem, up to 100,000 elements in both arrays can be entered, so a sorting algorithm that guarantees \(O(NlogN)\) in the worst case should be used.&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Python
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Get N and K as input
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# get all elements of array A
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# get all elements of array B as input
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# sort array A in ascending order
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# sort B in descending order
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Check the first index and compare the elements of two arrays up to K times
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#If the element of A is smaller than the element of B
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# replace two elements
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Escape the loop when an element in A is greater than or equal to an element in B
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# print the sum of all elements in array A
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;note&quot; title=&quot;reference&quot;&gt;&lt;a href=&quot;https://www.freecodecamp.org/&quot; target=&quot;_blank&quot;&gt;https://www.freecodecamp.org/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.programiz.com/&quot; target=&quot;_blank&quot;&gt;https://www.programiz.com/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.geeksforgeeks.org/&quot; target=&quot;_blank&quot;&gt;https://www.geeksforgeeks.org/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://blog.naver.com/PostList.naver?blogId=ndb796&quot; target=&quot;_blank&quot;&gt;https://blog.naver.com/PostList.naver?blogId=ndb796&lt;/a&gt;&lt;br /&gt;
이것이 코딩테스트다,2020,나동빈,한빛미디어&lt;/p&gt;</content><author><name>Byungchan Park</name><email>prettygood236@gmail.com</email></author><category term="data-structures-and-algorithms" /><category term="algorithms" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/data-structures-and-algorithms/sort_main.png" /><media:content medium="image" url="http://localhost:4000/assets/img/data-structures-and-algorithms/sort_main.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Linux &amp;amp; Terminal Commands</title><link href="http://localhost:4000/study/cli-linux-and-terminal-commands.html" rel="alternate" type="text/html" title="Linux &amp;amp; Terminal Commands" /><published>2022-02-09T00:00:00+09:00</published><updated>2022-02-09T00:00:00+09:00</updated><id>http://localhost:4000/study/cli-linux-and-terminal-commands</id><content type="html" xml:base="http://localhost:4000/study/cli-linux-and-terminal-commands.html">Unix was an operating system developed at Bell Labs in the mid 1960's. &lt;br&gt;
Many of the innovations and design choices the original Unix team have lived on 50+ years later, including the idea of **multi-user operating systems and hierarchical file systems.**&lt;br&gt;

* this unordered seed list will be replaced by the toc
{:toc}

## Introduction to Linux and shells

### Unix &lt;br&gt;

![Operating Systems](/assets/img/cli/operating-systems-timeline-and-family-tree.png){:width=100%} &lt;br&gt;&lt;br&gt;
Operating Systems: Timeline and Family Tree &lt;br&gt;
[See the entire tree here.](https://eylenburg.github.io/os_familytree.htm){:target=&quot;_blank&quot;}
{:.figure}

Everything in red here is considered in some way related uh or indebted to **Unix**.&lt;br&gt;
That includes things like linux, unbuntu, macOS.

Unix was an operating system developed at Bell Labs in the mid 1960's. &lt;br&gt;
Many of the innovations and design choices the original Unix team have lived on 50+ years later, including the idea of **multi-user operating systems and hierarchical file systems.**&lt;br&gt;

Unix is the &quot;grandfather&quot; of many modern operating systems that we frequently use today. 

Even these days most operating systems can be grouped into two families:
- The Microsoft NT descendants including Windows, Xbox OS, and Windows Phone/Mobile
- Pretty much everything else has lineage going back to **Unix**, including Mac OS, Linux, Android, Chrome OS, and even the PS4 OS.
&lt;br&gt;

&lt;!--more--&gt;

### Linux &lt;br&gt;

**GNU**  &lt;br&gt;

![Unix_history-simple](/assets/img/cli/Unix_history-simple.png){:width=100%} &lt;br&gt;&lt;br&gt;
Unix_history going back to 1969 early unix versions
{:.figure}

(pink) is closed source and that means the code is completely closed off. You can't edit it, you can't view it, you're not allowed to even try to tweak it.

(green) we have open source which you may be familiar with that term. The code is openly
viewable. you can change it, tweak it, make your own versions try things out.

(yellow) this is mixed/shared source type of operating system.

Richard Stallman was a leader in the group of developers who aimed to create Free Software 
alternatives to Unix.

In 1984 he began work on the GNU Project, with the goal of creating an operating system that included &quot;everything useful that normally comes with a Unix system so that one could get along without any software that is not free&quot;.

**The Linux Kernel**  &lt;br&gt;

![Kernel_Layout](/assets/img/cli/Kernel_Layout.png){:width=&quot;600&quot;} &lt;br&gt;&lt;br&gt;
Kernel Layout
{:.figure}

Another developer, Linus Torvalds, was working on creating his own kernel known as Linux. The kernel is the part of an OS that facilitates interactions between hardware and software. 

At the time, many GNU &quot;pieces&quot; were complete, but it lacked a kernel. Torvalds combined his kernel with the existing GNU components to create a full operating system. This is called Linux

**GNU/Linux** &lt;br&gt;

Linux is an operating system, like macOS or Windows.

It is also **the most popular Open Source operating system**, and it gives you the freedom to do whatever you want with your computer.

Linux is also special because there's not just &quot;one Linux&quot;, like is the case with Windows or macOS. Instead, we have distributions. For example you have Debian, Red Hat, and Ubuntu, probably the most popular distributions.

If you use a Mac, you just need to know that under the hood macOS is a UNIX Operating System. It shares a lot of the same ideas and software that a GNU/Linux system uses, because GNU/Linux is a free alternative to UNIX. 

Microsoft has an official Windows Subsystem for Linux which you can (and should!) install on Windows. This will give you the ability to run Linux in a very easy way on your PC.

UNIX is an umbrella term that groups many operating systems used in big corporations and institutions, starting from the 70's.
{:.note}

### Linux shell

A shell is a **command interpreter** that exposes an interface to the user to work with the underlying operating system.

It allows you to execute operations using text and commands, and it provides users advanced features like being able to create scripts.

Shells let you perform things in a more optimized way than a GUI (Graphical User Interface) could ever possibly let you do. Command line tools can offer many different configuration options without being too complex to use.

Many different kind of shells were created for those systems over time, and a few of them dominate the space: Bash, Csh, Zsh, Fish and many more!

All shells originate from the Bourne Shell, called sh. &quot;Bourne&quot; because its creator was Steve Bourne. 

Bash means Bourne-again shell. sh was proprietary and not open source, and Bash was created in 1989 to create a free alternative for the GNU project and the Free Software Foundation. Since projects had to pay to use the Bourne shell, Bash became very popular.

If you use a Mac, try opening your Mac terminal. By default it runs ZSH (or, pre-Catalina, Bash).

You can set up your system to run any kind of shell.

Each single shell has its own unique features and advanced usage, but they all share a common functionality: they can let you execute programs, and they can be programmed.
&lt;br&gt;

## 1. `man` command

![man](/assets/img/cli/man_command-1.png){:width=&quot;600&quot;} &lt;br&gt;
`man ls` result 
{:.figure}

Every time we don't know how to use a command, We can type `man &lt;command&gt;` to get the manual.&lt;br&gt;
Then you can use the `man` page to explore all the different options and parameters you can use on a command.


### tldr

When need to learn a command quickly we can use this site called tldr pages: [https://tldr.sh](https://tldr.sh/) {:target=_&quot;blank&quot;} (Is tldr an abbreviation for Too Long Don't Read? lol)

![man](/assets/img/cli/man_command-2.png){:width=&quot;600&quot;} &lt;br&gt;
`tldr ls` result 
{:.figure}

It's a command you can install, which you then run like this: tldr &lt;command&gt;. It gives you a very quick overview of a command, with some handy examples of common usage scenarios. Korean language support is also available.

## 2. `alias` command

You can create a new command, for example I like to call it ls -al to ll, You can do it like this:

```bash
alias ll='ls -al'
```
![alias](/assets/img/cli/alias_command-1.png){:width=&quot;600&quot;} &lt;br&gt;
`alias ll` result 
{:.figure}

The alias will work until the terminal session is closed.

To make it permanent, you need to add it to the shell configuration. This could be ~/.bashrc or ~/.profile or ~/.bash_profile if you use the Bash shell, depending on the use case.
And apply the created file using the following command.

```bash
source ~/.bash_profile 
```

## 3. `less` command

It shows you the content stored inside a file, in a nice and interactive UI.

Usage: `less &lt;filename&gt;`

![less](/assets/img/cli/less_command-1.png){:width=&quot;600&quot;} &lt;br&gt;

Once you are inside a `less` session, you can quit by pressing `q`.

You can navigate the file contents using the `up` and `down` keys, or using the `space bar` and `b` to navigate page by page. You can also jump to the end of the file pressing `G` and jump back to the start by pressing `g`.

You can search contents inside the file by pressing `/` and typing a word to search. This searches forward. You can search backwards using the `?` symbol and typing a word.

This command just visualises the file's content. You can directly open an editor by pressing `v`. It will use the system editor, which in most cases is `vim`.

Pressing the `F` key enters follow mode, or watch mode. When the file is changed by someone else, like from another program, you get to see the changes live.

This doesn't happen by default, and you only see the file version at the time you opened it. You need to press `ctrl-C` to quit this mode. In this case the behaviour is similar to running the `tail -f &lt;filename&gt;` command.

You can open multiple files, and navigate through them using `:n` (to go to the next file) and `:p` (to go to the previous).

## 4. `tail` command

The best use case of tail in my opinion is when called with the `-f` option. It opens the file at the end, and watches for file changes.

Any time there is new content in the file, it is printed in the window. This is great for watching log files, for example:

```bash
tail -f /var/log/system.log
```

To exit, press `ctrl-C`.

You can print the last 10 lines in a file:

```bash
tail -n 10 &lt;filename&gt;
```

You can print the whole file content starting from a specific line using `+` before the line number:

```bash
tail -n +10 &lt;filename&gt;
```

`tail` can do much more and as always my advice is to check `man tail`.

## 5. `grep` command

When you master `grep` command, it will help you tremendously in your day to day coding.
You can use `grep` to search in files, or combine it with pipes to filter the output of another command.
For example here's how we can find the occurences of the document.getElementById line in the index.md file:

```bash
grep -n document.getElementById index.md
```
![grep](/assets/img/cli/grep_command-1.png){:width=&quot;600&quot;} &lt;br&gt;

Using the `-n` option it will show the line numbers:

```bash
grep -n document.getElementById index.md
```
![grep](/assets/img/cli/grep_command-2.png){:width=&quot;600&quot;} &lt;br&gt;

One very useful thing is to tell grep to print 2 lines before and 2 lines after the matched line to give you more context. That's done using the `-C` option, which accepts a number of lines:

```bash
grep -nC 2 document.getElementById index.md
```
![grep](/assets/img/cli/grep_command-3.png){:width=&quot;600&quot;} &lt;br&gt;

Search is case sensitive by default. Use the `-i` flag to make it insensitive.

As mentioned, you can use grep to filter the output of another command. We can replicate the same functionality as above using:

```bash
less index.md | grep -n document.getElementById
```
![grep](/assets/img/cli/grep_command-4.png){:width=&quot;600&quot;} &lt;br&gt;

The search string can be a regular expression, and this makes `grep` very powerful.

Another thing you might find very useful is to invert the result, excluding the lines that match a particular string, using the `-v` option:
&lt;br&gt;&lt;br&gt;

[The Most Popular Linux &amp; Terminal Commands](https://www.youtube.com/watch?v=ZtqBQ68cfJc&amp;t=196s){:target=&quot;_blank&quot;}&lt;br&gt;
[The 40 Most-Used Linux Commands You Should Know](https://kinsta.com/blog/linux-commands/#:~:text=A%20Linux%20command%20is%20a,abstraction%20of%20command-line%20programs.){:target=&quot;_blank&quot;}
{:.note title=&quot;reference&quot;}</content><author><name>Byungchan Park</name><email>prettygood236@gmail.com</email></author><category term="study" /><category term="cli" /><summary type="html">Unix was an operating system developed at Bell Labs in the mid 1960’s. Many of the innovations and design choices the original Unix team have lived on 50+ years later, including the idea of multi-user operating systems and hierarchical file systems.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/cli/linux-command-line-ls-output.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/cli/linux-command-line-ls-output.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Power</title><link href="http://localhost:4000/coding-test/power.html" rel="alternate" type="text/html" title="Power" /><published>2022-02-08T00:00:00+09:00</published><updated>2022-02-08T00:00:00+09:00</updated><id>http://localhost:4000/coding-test/power</id><content type="html" xml:base="http://localhost:4000/coding-test/power.html">**[다이나믹 프로그래밍](https://prettygood236.github.io/data-structures-and-algorithms/fundamentals-of-algorithms.html#41-what-is-dynamic-programming)**을 이용한 거듭제곱 구하기

* this unordered seed list will be replaced by the toc
{:toc .large-only}

## Problem

두 수를 입력받아 거듭제곱을 리턴해야 합니다.

**입력** &lt;br&gt;
인자 1: base &lt;br&gt;
\- number 타입의 자연수 (base &gt;= 2) &lt;br&gt;
인자 2: exponent &lt;br&gt;
\- number 타입의 정수 (exponent &gt;= 0)

**출력** &lt;br&gt;
number 타입을 리턴해야 합니다.
실제 계산 결과를 94,906,249로 나눈 나머지를 리턴해야 합니다.

**주의사항** &lt;br&gt;
Math.pow, 거듭제곱 연산자 사용은 금지됩니다. &lt;br&gt;
시간복잡도 O(logN)을 만족해야 합니다. &lt;br&gt;
나머지를 구하는 이유는 계산 결과가 컴퓨터로 나타낼 수 있는 수의 범위를 넘을 수 있기 때문입니다. 하지만 모든 연산이 끝난 뒤에 그 결과를 94,906,249로 나누려고 해서는 안 됩니다. 연산 중간에도 이 범위를 넘을 수 있기 때문에, 연산을 할 때마다 나머지를 구하고 그 결과에 연산을 이어가시기 바랍니다.

**입출력 예시**
~~~js
let output = power(3, 40);
console.log(output); // --&gt; 19334827
~~~

## Solution

단순히 반복문으로 거듭제곱을 구하는 문제가 아니라, 시간복잡도O(logN) 충족을 위해 반복횟수를 줄일 아이디어가 필요하다.

$$2^{10}$$을 구하는 과정을 예로들어 아이디어를 떠올리면,

$$2^{10} = 2^5 *  2^5$$ &lt;br&gt;
$$2^5 = 2^2 * 2^2 * 2$$ &lt;br&gt;
$$2^2 = 2^1 * 2^1$$ 
{:.message}

*&lt;u&gt;단순히 지수만큼 곱하는 시간복잡도O(N)보다 적은 반복횟수로 계산하므로 시간복잡도 O(logN)이 충족된다.&lt;/u&gt;*

이를 **점화식**으로 표현하면 다음과 같다.

지수가 짝수일 때, &lt;br&gt;
$$base^{exponent} = base^{exponent/2} * base^{exponent/2}$$ &lt;br&gt;
지수가 홀수일 때, &lt;br&gt;
$$base^{exponent} = base^{exponent/2의 몫} * base^{exponent/2의 몫} *base$$ &lt;br&gt;
{:.message}

또한, 이는 **&lt;span style='background-color: #FFDFF6'&gt;[다이나믹 프로그래밍](https://prettygood236.github.io/data-structures-and-algorithms/fundamentals-of-algorithms.html#41-what-is-dynamic-programming)&lt;/span&gt;**의 두가지 요건 

***&lt;span style='background-color: #e0ffc4'&gt;1. 최적 부분구조&lt;/span&gt;*** : 큰 문제는 작은문제로 나뉠수있으며 작은문제의 해답을 모으면 큰문제를 해결할 수 있다. &lt;br&gt;
***&lt;span style='background-color: #e0ffc4'&gt;2. 중복 부분문제&lt;/span&gt;*** : 구했던 작은문제의 해답을 또 구해야한다. 
 
을 충족한다. 

따라서 *&lt;span style='background-color: #fff39b'&gt;[메모이제이션](https://prettygood236.github.io/data-structures-and-algorithms/fundamentals-of-algorithms.html#42-what-is-memoization)을 활용한 탑다운 &lt;/span&gt; 방식으로 구현할 수 있다.*

~~~js
// Javascript
// 결과 테이블 초기화
const d = [];
  for (i=0; i&lt;100; i++){ 
    d.push(0)
  }
  
function power(base, exponent) {
  // console.log(`exponent = ${exponent}`)
  
  // 종료 조건 
  if (exponent === 0) return 1;  // base의 0승은 1이다.
  if (exponent === 1) return base; // base의 1승은 base이다.
  
  // 결과 테이블에 값이 있다면 이미 계산된 것이므로 출력한다. 
  if (d[exponent] != 0) return d[exponent]; 

  // 지수가 짝수일 때, 계산한 결과를 점화식에 따라 결과 테이블에 메모한다. 
  if (exponent % 2 == 0) {
    d[exponent] = (power(base, exponent/2) * power(base, exponent/2)) % 94906249
  }
  // 지수가 홀수일 때, 계산한 결과를 점화식에 따라 결과 테이블에 메모한다. 
  else {
    d[exponent] = (power(base, Math.floor(exponent/2)) * power(base, Math.floor(exponent/2)) * base) % 94906249
  }
  // console.log(`d[${exponent}] = ${d[exponent]}`)
  // 결과 테이블의 값을 출력한다. 
  return d[exponent]
}
~~~

또한 문제에 명시된 것 처럼, 컴퓨터가 나타낼 수 있는 수의 범위를 넘을 수 있기 때문에 계산 시마다 94906249의 나머지를 반환해주어야한다.

3의 40승을 구할 때, 다음과 같이 호출되고 결과 테이블에 값이 저장되는 것을 확인할 수 있다. 

~~~js
let output = power(3,40)
// console.log
exponent = 40
exponent = 20
exponent = 10
exponent = 5
exponent = 2
exponent = 1
exponent = 1
d[2] = 9
exponent = 2
d[5] = 243
exponent = 5
d[10] = 59049
exponent = 10
d[20] = 70159437
exponent = 20
d[40] = 19334827
~~~</content><author><name>Byungchan Park</name><email>prettygood236@gmail.com</email></author><category term="coding-test" /><category term="coding-test" /><summary type="html">다이나믹 프로그래밍을 이용한 거듭제곱 구하기</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/coding-test/power.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/coding-test/power.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Fundamentals of Algorithms - 3. DFS &amp;amp; BFS</title><link href="http://localhost:4000/data-structures-and-algorithms/dfs-and-bfs.html" rel="alternate" type="text/html" title="Fundamentals of Algorithms - 3. DFS &amp;amp; BFS" /><published>2022-02-05T00:00:00+09:00</published><updated>2022-02-05T00:00:00+09:00</updated><id>http://localhost:4000/data-structures-and-algorithms/dfs-and-bfs</id><content type="html" xml:base="http://localhost:4000/data-structures-and-algorithms/dfs-and-bfs.html">* toc
{:toc .large-only}

## 3. DFS &amp; BFS

### 3.1 What is Depth-First Search?

DFS is literally an algorithm that searches the deep part first.&lt;br&gt;
DFS uses a stack data structure (or recursive function)

**DFS operation process**
1. Insert the search start node into the stack and process the visit.
2. If there is at least one unvisited adjacent node at the top node of the stack, the node is push into the stack and visited. If there are no unvisited adjacent nodes, pop the topmost node from the stack.
3. Repeat until step 2 can no longer be performed.
&lt;br&gt;

![Depth-First Search operation](/assets/img/data-structures-and-algorithms/graph_dfs.gif){:width=&quot;600&quot;} &lt;br&gt;
&lt;br&gt;

### 3.2 What is Breadth-First Search?

![Breadth-First Search operation](/assets/img/data-structures-and-algorithms/graph_bfs.gif){:width=&quot;600&quot;} &lt;br&gt;
&lt;br&gt;


### 3.3 Tree : DFS Implementation

~~~js
// Javascript
// Simple tree (no membership check)
let Node = function (value) {
  this.value = value;
  this.children = [];
};
Node.prototype.addChild = function (child) {
  this.children.push(child);
  return child;
};

let dfs = function (node) {
  let result = [node.value]
  // console.log(result)
  node.children.forEach(el=&gt;{
    result = result.concat(dfs(el))
    // console.log(el)
    // console.log(result)
  })
  return result  
}
let root = new Node(1);
let rootChild1 = root.addChild(new Node(2));
let rootChild2 = root.addChild(new Node(3));
let leaf1 = rootChild1.addChild(new Node(4));
let leaf2 = rootChild1.addChild(new Node(5));
leaf1.addChild(new Node(6));
rootChild2.addChild(new Node(7));
output = dfs(root);
console.log(output); // --&gt; [1, 2, 4, 6, 5, 3, 7]
~~~
&lt;br&gt;

### 3.4 Tree : BFS Implementation

~~~js
// Javascript
// Simple tree (no membership check)
let bfs = function (node) {
  let result = [node.value]
  let queue = [node]
  while(queue.length!==0){
    let target = queue.shift()
    target.children.forEach(children=&gt;{
      result.push(children.value)
      queue.push(children)
    })
  }
  return result  
};


let bfs = function (node) {
  let result = [node.value]
  // console.log(result)
  node.children.forEach(el=&gt;{
    result = result.concat(bfs(el))
    // console.log(el)
    // console.log(result)
  })
  return result  
}
let root = new Node(1);
let rootChild1 = root.addChild(new Node(2));
let rootChild2 = root.addChild(new Node(3));
let leaf1 = rootChild1.addChild(new Node(4));
let leaf2 = rootChild1.addChild(new Node(5));
leaf1.addChild(new Node(6));
rootChild2.addChild(new Node(7));
output = bfs(root);
console.log(output); // --&gt; [1, 2, 3, 4, 5, 7, 6]
~~~
&lt;br&gt;


### 3.5 Graph : DFS Implementation

~~~js
// Javascript
function bfs(graph, root) {
  let nodesLen = {};
  
  for (let i = 0; i &lt; graph.length; i++) {
    nodesLen[i] = Infinity;
  }
  nodesLen[root] = 0; 
  
  let queue = [root]; 
  let current; 

  while (queue.length != 0) {
    current = queue.shift();
    
    let curConnected = graph[current];
    let neighborIdx = []; 
    let idx = curConnected.indexOf(1); 
    while (idx != -1) {
      neighborIdx.push(idx); 
      idx = curConnected.indexOf(1, idx + 1); 
    }
    
    for (let j = 0; j &lt;u neighborIdx.length; j++) {
      if (nodesLen[neighborIdx[j]] == Infinity) {
        nodesLen[neighborIdx[j]] = nodesLen[current] + 1;
        queue.push(neighborIdx[j]); 
      }
    }
  }
  return nodesLen;
};

let exBFSGraph = [
  [0, 1, 1, 1, 0],
  [0, 0, 1, 0, 0],
  [1, 1, 0, 0, 0],
  [0, 0, 0, 1, 0],
  [0, 1, 0, 0, 0]
];
console.log(bfs(exBFSGraph, 1)); //{ '0': 2, '1': 0, '2': 1, '3': 3, '4': Infinity }
~~~
&lt;br&gt;




[https://www.freecodecamp.org/](https://www.freecodecamp.org/){:target=&quot;_blank&quot;}&lt;br&gt;
[https://www.programiz.com/](https://www.programiz.com/){:target=&quot;_blank&quot;}&lt;br&gt;
[https://www.geeksforgeeks.org/](https://www.geeksforgeeks.org/){:target=&quot;_blank&quot;}&lt;br&gt;
[https://blog.naver.com/PostList.naver?blogId=ndb796](https://blog.naver.com/PostList.naver?blogId=ndb796){:target=&quot;_blank&quot;}&lt;br&gt;
이것이 코딩테스트다,2020,나동빈,한빛미디어
{:.note title=&quot;reference&quot;}</content><author><name>Byungchan Park</name><email>prettygood236@gmail.com</email></author><category term="data-structures-and-algorithms" /><category term="algorithms" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/data-structures-and-algorithms/dfs-and-bfs_main.png" /><media:content medium="image" url="http://localhost:4000/assets/img/data-structures-and-algorithms/dfs-and-bfs_main.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[React] 컴포넌트 디자인</title><link href="http://localhost:4000/study/react-component-design.html" rel="alternate" type="text/html" title="[React] 컴포넌트 디자인" /><published>2022-02-04T00:00:00+09:00</published><updated>2022-02-04T00:00:00+09:00</updated><id>http://localhost:4000/study/react-component-design</id><content type="html" xml:base="http://localhost:4000/study/react-component-design.html">레고처럼 **조립해 나갈 수 있는 부품 단위**로 UI 컴포넌트를 만들어 나가는 개발&lt;br&gt;

* this undordered seed list will be replaced by the toc
{:toc .large-only}

**Component Driven Development**
![Component Driven Development](/assets/img/react/react-component-design/component-driven-development.png)
* CDD 방법을 활용하여 UI 를 구축하는 사이트 :　[BBC](https://5d28eb5ee163f6002046d6fb-steqdibxdq.chromatic.com/?path=/story/components-brand--without-brand-link){:target=&quot;_blank&quot;}　[UN](https://5d28eb5ee163f6002046d6fb-steqdibxdq.chromatic.com/?path=/story/components-brand--without-brand-link){:target=&quot;_blank&quot;}
&lt;br&gt;


## 1. Design System

### 1.1 Design System

**UI 컴포넌트들의 모음을 구조화 하는 방법**
* 디자인 시스템이란 서비스를 만드는 데 사용한 공통 컬러, 서체, 인터랙션, 각종 정책 및 규정에 관한 모든 컴포넌트를 정리해놓은 것이며 불필요한 커뮤니케이션을 없애기 위해 체계적으로 정리한 시스템을 말한다.
* UI 컴포넌트는 사용자 인터페이스를 이루는 조각들의 시각적이고 기능적인 속성을 마치 레고(LEGO) 블록처럼 캡슐화한다.
* 최근에 등장한 유저 인터페이스(UI)들은 다양한 사용자 경험을 제공하기 위해 수백 개의 모듈식 UI 컴포넌트가 재배열된 구조로 이루어져 있다.
* 디자인 시스템은 재사용이 가능한 UI 컴포넌트들로 이루어져, 복잡하고 견고하며 사용자가 접근하기에 용이한 사용자 인터페이스를 구축할 수 있다. 
* 디자이너와 개발자 모두 UI 컴포넌트를 다루기 때문에, 디자인 시스템은 두 분야를 연결하는 다리이기도 하다. 또한 조직의 공용 컴포넌트에 대한 &quot;진실의 근원(source of truth)&quot;이기도 하다.
* [Uber](https://github.com/uber/baseweb){:target=&quot;_blank&quot;}, [Airbnb](https://github.com/airbnb/lunar){:target=&quot;_blank&quot;}, [IBM](https://www.carbondesignsystem.com/){:.target=&quot;_blank&quot;}, [GitHub](https://primer.style/css/){:.target=&quot;_blank&quot;}을 비롯한 수백 개가 넘는 기업의 디자인 시스템에서 스토리북이 사용되고 있다. 아래 목록은 그 중 가장 우수한 팀에서 사용되고 있는 Tool들이다.

**빌드 컴포넌트**
* 📚 [스토리북(Storybook)](https://storybook.js.org/){:.target=&quot;_blank&quot;}: UI 컴포넌트 개발과 자동으로 문서를 생성할 때 사용
* ⚛️ [리액트(React)](https://reactjs.org/){:.target=&quot;_blank&quot;}: 선언 중심 컴포넌트 UI(create-react-app)를 사용
* 💅 [스타일 컴포넌트(Styled-components)](https://styled-components.com/){:.target=&quot;_blank&quot;}: 컴포넌트 단위의 스타일링에 사용
* ✨ [프리티어(Prettier)](https://prettier.io/){:.target=&quot;_blank&quot;}: 자동화된 코드 포맷팅에 사용
&lt;br&gt;

### 1.2 Storybook

UI 개발 즉, **Component Driven Development**를 하기 위한 도구
* 각각의 컴포넌트들을 따로 볼 수 있게 구성해주어 한 번에 하나의 컴포넌트에서 작업할 수 있다.
* 재사용성을 확대하기 위해 컴포넌트를 문서화하고, 자동으로 컴포넌트를 시각화하여 전체 UI를 한눈에 볼 수 있다.
* 시뮬레이션할 수 있는 다양한 테스트 상태를 확인하고 이를 통해 버그를 사전에 방지할 수 있도록 도와준다. 
* 테스트 및 개발 속도를 향상시키는 장점이 있으며, 애플리케이션 또한 의존성을 걱정하지 않고 빌드할 수 있다.


### 1.3 Storybook 주요 기능

* UI 컴포넌트들을 카탈로그 화하기
* 컴포넌트 변화를 Stories로 저장하기
* 핫 모듈 재 로딩과 같은 개발 툴 경험을 제공하기
* 리액트를 포함한 다양한 뷰 레이어 지원하기 
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;

## 2. CSS 방법론

### 2.1 CSS 전처리기(CSS Preprocessor)

CSS가 구조적으로 작성될 수 있게 도움을 주는 도구
* CSS의 문제점들을 프로그래밍 개념(변수, 함수, 상속 등)을 활용하여 해결할 수 있도록 한다.
* CSS 전처리기(CSS Preprocessor) 자체만으로는 웹 서버가 인지하지 못하기 때문에 각 CSS 전처리기에 맞는 Compiler를 사용해야 하고 컴파일을 하게 되면 실제로 우리가 사용하는 CSS 문서로 변환이 된다.


### 2.2 SASS(Syntactically Awesome Style Sheets)
![SASS](/assets/img/react/react-component-design/sass.png)

CSS 전처리기 중에서 가장 유명한 SASS는 CSS를 확장해 주는 스크립팅 언어
* 즉, CSS를 만들어주는 언어로서 자바스크립트처럼 특정 속성(ex. color, margin, width 등)의 값(ex. #ffffff, 25rem, 100px 등)을 변수로 선언하여 필요한 곳에 선언된 변수를 적용할 수도 있고, 반복되는 코드를 한 번의 선언으로 여러 곳에서 재사용할 수 있다.
* SCSS 코드를 읽어서 전처리한 다음 컴파일해서 전역 CSS 번들 파일을 만들어 주는 전처리기(preprocessor)
* 스타일이 겹치는 문제를 해결하기 위해 단순히 계층 구조를 만들어 내는 것에 의지하며, 그 결과 컴파일된 CSS의 용량은 어마어마하게 커지는 치명적인 단점이 있다.
&lt;br&gt;

### 2.3 CSS 방법론
방법론의 지향점은 다음과 같다. 
* 코드의 재사용
* 코드의 간결화(유지 보수 용이)
* 코드의 확장성
* 코드의 예측성(클래스 명으로 의미 예측)

### 2.4 BEM
![BEM](/assets/img/react/react-component-design/bem.png)

대표적인 CSS 방법론인 BEM이란 Block, Element, Modifier로 구분하여 클래스명을 작성하는 방법
* Block, Element, Modifier 각각은 —와 __로 구분
* 클래스명은 BEM 방식의 이름을 여러 번 반복하여 재사용할 수 있도록 하며 HTML/CSS/SASS 파일에서도 더 일관된 코딩 구조를 만들어 준다.
* 클래스명 선택자가 장황해지고, 이런 긴 클래스명 때문에 마크업이 불필요하게 커지며, 재사용하려고 할 때마다 모든 UI 컴포넌트를 명시적으로 확장해야는 단점이 있다.
&lt;br&gt;

### 2.5 각 CSS 방법론의 특징과 장, 단점
![CSS-Methlogy](/assets/img/react/react-component-design/css-methlogy.png)
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;

## 3. Styled-Component
![Styled-Component](/assets/img/react/react-component-design/styled-component.png)

SASS와 BEM도 고치지 못했던 몇 가지 문제들은 언어 로직 상에 진정한 캡슐화의 개념이 없다는 것이었고, 이로 인해 개발자들이 유일한 클래스명을 선택하는 것에 의존할 수밖에 없었다. &lt;br&gt;&lt;br&gt;
Styled-Component는 **캡슐화(encapsulation : 객체의 속성과 행위를 하나로 묶고 실제 구현 내용 일부를 외부에 감추어 은닉하는 개념)**를 가능하게 한다.
* 가장 인기있는 CSS-in-JS 관련 React 라이브러리
* 기능적(Functional) 혹은 상태를 가진 컴포넌트들로부터 UI를 완전히 분리해 사용할 수 있는 아주 단순한 패턴을 제공 
* 기존 CSS 문법으로도 스타일 속성이 추가된 React 컴포넌트를 만들 수 있다. 

~~~js
const Button = styled.a`
  display: inline-block;
  border-radius: 3px;
  padding: 0.5rem 0;
  margin: 0.5rem 1rem;
  width: 11rem;
`;
~~~
Styled Component 를 이용한 Button 생성
{:.figure}

### 3.1 Styled Component의 특징

**Automatic critical CSS**&lt;br&gt;
* 화면에 어떤 컴포넌트가 렌더링 되었는지 추적해서 해당하는 컴포넌트에 대한 스타일을 자동으로 삽입한다. 
* 따라서 코드를 적절히 분배해 놓으면 사용자가 어플리케이션을 사용할 때 최소한의 코드만으로 화면이 띄워지도록 할 수 있다.

**No class name bugs**&lt;br&gt;
* 스스로 유니크한 className 을 생성하여 className 의 중복이나 오타로 인한 버그를 줄여준다.

**Easier deletion of CSS**&lt;br&gt;
* 모든 스타일 속성이 특정 컴포넌트와 연결되어 있기 때문에 만약 컴포넌트를 더 이상 사용하지 않아 삭제할 경우 이에 대한 스타일 속성도 함께 삭제된다.

**Simple dynamic styling**&lt;br&gt;
* className을 일일이 수동으로 관리할 필요 없이 React 의 props 나 전역 속성을 기반으로 컴포넌트에 스타일 속성을 부여하기 때문에 간단하고 직관적이다.

**Painless maintenance**&lt;br&gt;
* 컴포넌트에 스타일을 상속하는 속성을 찾아 다른 CSS 파일들을 검색하지 않아도 되기 때문에 코드의 크기가 커지더라도 유지보수가 어렵지 않다.

**Automatic vendor prefixing**&lt;br&gt;
* 개별 컴포넌트마다 기존의 CSS 를 이용하여 스타일 속성을 정의하면 이외의 것들은 Styled Component 가 알아서 처리해 준다.
&lt;br&gt;

### 3.2 Getting Started

~~~js
import styled from &quot;styled-components&quot;;

// &lt;h1&gt; 태그를 렌더링 할 title component를 만든다.
const Title = styled.h1`
  font-size: 3em;
  text-align: center;
  color: MidnightBlue;
`;

// &lt;section&gt; 태그를 렌더링 할 Wrapper component를 만든다.
const Wrapper = styled.section`
  padding: 6em;
  background: LemonChiffon;
`;

export default function App() {
  // 일반적으로 컴포넌트를 사용하는 것처럼 Title과 Wrapper를 사용하면 된다!
  return (
    &lt;Wrapper&gt;
      &lt;Title&gt;Hello CHAN!&lt;/Title&gt;
    &lt;/Wrapper&gt;
  );
}
~~~
`&lt;Title&gt;`과 `&lt;Wrapper&gt;` 라는 컴포넌트에 스타일 속성을 정의한 후 React 에서 컴포넌트를 사용하는 것과 동일하게 리턴문 안에서 해당 컴포넌트들을 사용하고 있으며, `&lt;h1&gt;` tag 의 스타일 속성은 styled.h1 , `&lt;section&gt;` tag 의 스타일 속성은 styled.section 를 사용하고 있다. 
{:.figure}
&lt;br&gt;

![Getting Started](/assets/img/react/react-component-design/getting-started.png){: width=&quot;600&quot; height=&quot;600&quot;} &lt;br&gt;
결과
{:.figure}
&lt;br&gt;

### 3.3 Adapting based on props &amp; Extending Styles

Styled Component 는 **스타일 속성을 지닌 컴포넌트를 정의할 때에 함수를 전달하고, 그 함수 안에서 props 를 사용**할 수도 있다. &lt;br&gt;
또한 **같은 스타일 속성을 지닌 여러개의 컴포넌트들 중 몇 개의 컴포넌트에 약간의 변화를 주고 싶은 때**에는 상속받고자 하는 스타일 속성을 지닌 컴포넌트를 `styled()` 로 감싼 뒤, 변경하고 싶은 속성만 새로 정의해 주면 기존 속성을 확장하여 사용할 수 있다. 

~~~js
import styled from &quot;styled-components&quot;;

  // Button component
const Button = styled.button`
  /* Adapt the colors based on primary prop */
  background: ${(props) =&gt; (props.primary ? &quot;palevioletred&quot; : &quot;white&quot;)};
  color: ${(props) =&gt; (props.primary ? &quot;white&quot; : &quot;palevioletred&quot;)};

  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border: 2px solid palevioletred;
  border-radius: 3px;
`;

const Tomato = styled(Button)`
  color: tomato;
  border-color: tomato;
`;

// App component
export default function App() {
  return (
    &lt;div className=&quot;App&quot;&gt;
      &lt;Button&gt;Normal&lt;/Button&gt;
      &lt;Button primary&gt;Primary&lt;/Button&gt;
      &lt;Tomato&gt;Tomato&lt;/Tomato&gt;
    &lt;/div&gt;
  );
}
~~~

`&lt;Button&gt;` 컴포넌트의 background 와 color 속성은 primary 라는 props 의 전달 여부에 따라 컬러값을 정의하고 있다. &lt;br&gt; 
기존의 Button 컴포넌트에 Tomato 컴포넌트만을 위한 새로운 속성을 추가한 것이다.
{:.figure}
&lt;br&gt;



![Adapting based on props &amp; Extending Styles](/assets/img/react/react-component-design/adapting-based-on-props-and-extending-styles.png){: width=&quot;600&quot; height=&quot;600&quot;} &lt;br&gt;
결과
{:.figure}
&lt;br&gt;

### 3.4 Passed props

컴포넌트에 **props 로 스타일 속성이 전달**된다면 해당 컴포넌트는 **props 로 전달된 속성을 우선 적용**하며, 전달되는 속성이 없다면 기본으로 설정된 속성을 적용한다. 이는 Styled Component 가 개발자에 의해 설정된 속성과 기본 속성을 구분할 수 있기 때문이다.

~~~js
import styled from &quot;styled-components&quot;;

// Styled Component로 만들어진 Input 컴포넌트
const Input = styled.input`
  padding: 0.5em;
  margin: 0.5em;
  color: ${(props) =&gt; props.inputColor || &quot;red&quot;};
  background: papayawhip;
  border: none;
  border-radius: 3px;
`;

export default function App() {
  return (
    &lt;div&gt;
      {/* 아래 Input 컴포넌트는 styled component인 Input 컴포넌트에 지정된 inputColor(red)가 적용되었다.  */}
      &lt;Input defaultValue=&quot;김코딩&quot; type=&quot;text&quot; /&gt;
      {/* 아래 Input 컴포넌트는 props로 전달된 커스텀 inputColor(blue)가 적용되었다. */}
      &lt;Input defaultValue=&quot;박해커&quot; type=&quot;text&quot; inputColor=&quot;blue&quot; /&gt;
    &lt;/div&gt;
  );
}
~~~
props 로 color 속성이 전달된 Input 컴포넌트는 해당 color 속성이 글자색에 적용되고, props 가 전달되지 않은 Input 컴포넌트는 기본 색상(여기서는 빨간색)이 적용된 것을 확인할 수 있다. 
{:.figure}
&lt;br&gt;
![Passed props](/assets/img/react/react-component-design/passed-props
.png){: width=&quot;600&quot; height=&quot;600&quot;} &lt;br&gt;
결과
{:.figure}
&lt;br&gt;

## 4. DOM reference를 잘 활용할 수 있는 useRef

### 4.1 useRef

React는 DOM 엘리먼트의 주소값을 활용(focus, text selection, media playback, 에니메이션 적용
d3.js, greensock 및 DOM 기반 라이브러리 활용 등)해야 하는 예외적인 상황에서 **useRef**으로 DOM 노드, 엘리먼트, 그리고 리액트 컴포넌트 주소값을 참조할 수 있다. 

~~~js
const 주소값을_담는_그릇 = useRef(참조자료형)
// 이제 주소값을_담는_그릇 변수에 어떤 주소값이든 담을 수 있다.
return (
    &lt;div&gt;
      &lt;input ref={주소값을_담는_그릇} type=&quot;text&quot; /&gt;
        {/* React에서 사용 가능한 ref라는 속성에 주소값을_담는_그릇을 값으로 할당하면*/}
        {/* 주소값을_담는_그릇 변수에는 input DOM 엘리먼트의 주소가 담긴다. */}
        {/* 향후 다른 컴포넌트에서 input DOM 엘리먼트를 활용할 수 있다. */}
    &lt;/div&gt;
  );
~~~

이 주소값은 컴포넌트가 re-render 되더라도 바뀌지 않는다. 
{:.figure}

~~~js
function TextInputWithFocusButton() {
  const inputEl = useRef(null);
  const onButtonClick = () =&gt; {
    inputEl.current.focus();
  };
  return (
    &lt;&gt;
      &lt;input ref={inputEl} type=&quot;text&quot; /&gt;
      &lt;button onClick={onButtonClick}&gt;Focus the input&lt;/button&gt;
    &lt;/&gt;
  );
}
~~~

컴포넌트가 re-render 되더라도 주소값이 바뀌지 않는 특성을 활용하여 위의 제한된 상황에서 useRef를 활용할 수 있다.
{:.figure}

제시된 상황을 제외한 대부분의 경우 기본 리액트 문법을 벗어나 useRef를 남용하는 것은 부적절하고, React의 특징이자 장점인 선언적 프로그래밍 원칙과 배치되기 때문에, 조심해서 사용해야 한다.
&lt;br&gt;


### 4.2 useRef 활용 예시 

[Action Item 1 : focus](https://codesandbox.io/s/patient-worker-3kzhd?from-embed=&amp;file=/src/App.js){:.target=&quot;_blank&quot;}
&lt;br&gt;

[Action Item 2 : media playback](https://codesandbox.io/s/priceless-sanderson-kx77s?from-embed){:.target=&quot;_blank&quot;}


Next　[[React] Sprint - React Custom Component](2022-02-04-react-sprint-custom-component.md){:.heading.flip-title}
{:.read-more} 


[https://www.codestates.com/](https://www.codestates.com/){:target=&quot;_blank&quot;}&lt;br&gt;
{:.note title=&quot;reference&quot;}</content><author><name>Byungchan Park</name><email>prettygood236@gmail.com</email></author><category term="study" /><category term="react" /><summary type="html">레고처럼 조립해 나갈 수 있는 부품 단위로 UI 컴포넌트를 만들어 나가는 개발</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/react/react-component-design/react-component-design-main.png" /><media:content medium="image" url="http://localhost:4000/assets/img/react/react-component-design/react-component-design-main.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Sudoku</title><link href="http://localhost:4000/coding-test/sudoku-copy.html" rel="alternate" type="text/html" title="Sudoku" /><published>2022-02-03T00:00:00+09:00</published><updated>2022-02-03T00:00:00+09:00</updated><id>http://localhost:4000/coding-test/sudoku%20copy</id><content type="html" xml:base="http://localhost:4000/coding-test/sudoku-copy.html">Back tracking을 이용한 스도쿠 문제풀이 

* this unordered seed list will be replaced by the toc
{:toc .large-only}

## Problem

가로 9칸, 세로 9칸으로 이루어져 있는 표에 1부터 9까지의 숫자를 가로줄, 세로줄, 3X3 칸에 중복되지 않게 한 번씩만 넣으면 해결
-   주의사항 : 숫자가 입력되지 않은 칸은 편의상 0이 입력되어 있다.
-   입출력 예시

~~~js
let board = [
  [0, 3, 0, 2, 6, 0, 7, 0, 1],
  [6, 8, 0, 0, 7, 0, 0, 9, 0],
  [1, 9, 0, 0, 0, 4, 5, 0, 0],
  [8, 2, 0, 1, 0, 0, 0, 4, 0],
  [0, 0, 4, 6, 0, 2, 9, 0, 0],
  [0, 5, 0, 0, 0, 3, 0, 2, 8],
  [0, 0, 9, 3, 0, 0, 0, 7, 4],
  [0, 4, 0, 0, 5, 0, 0, 3, 6],
  [7, 0, 3, 0, 1, 8, 0, 0, 0],
];
let output = sudoku(board);
console.log(output); // --&gt;
/* 
[
  [4, 3, 5, 2, 6, 9, 7, 8, 1],
  [6, 8, 2, 5, 7, 1, 4, 9, 3],
  [1, 9, 7, 8, 3, 4, 5, 6, 2],
  [8, 2, 6, 1, 9, 5, 3, 4, 7],
  [3, 7, 4, 6, 8, 2, 9, 1, 5],
  [9, 5, 1, 7, 4, 3, 6, 2, 8],
  [5, 1, 9, 3, 2, 6, 8, 7, 4],
  [2, 4, 8, 9, 5, 7, 1, 3, 6],
  [7, 6, 3, 4, 1, 8, 2, 5, 9],
];
 */
~~~

&lt;br&gt;
테스트케이스는 유효한 입력만 들어오는 스도쿠이나, 유효한지 (스도쿠 해결이 가능한 지) 판별하여 가능하면 해결하도록 작성.

## Solution

~~~js
// javascript
function solve(board) {
    if (solved(board)) {   
        return board  // 다 해결됐다면 현재 보드를 리턴
    } else {
        const possibilities = nextBoards(board)
        const validBoards = keepOnlyValid(possibilities)
        return searchForSolution(validBoards)
    }
}
// 목록에서 잘못된 보드를 모두 필터링
function keepOnlyValid(boards){
    let res = []
    for (let i = 0; i &lt; boards.length; i++){
        if (validBoard(boards[i])){
            res.push(boards[i])
        }
    }
    return res
}
// 주어진 보드가 유효한지 확인
function validBoard(board){
    return rowsCheck(board) &amp;&amp; columnsCheck(board) &amp;&amp; boxesCheck(board)
}
// 다 해결된(모든 칸이 채워진) 스도쿠인지 검사
function solved(board){
    for (let i = 0; i &lt; 9; i++){
        for (let j = 0; j &lt; 9; j++){
            if (board[i][j] == 0){
                return false
            }
        }
    }
    return true
}
// 해결이 안되었다면 백트래킹
function searchForSolution(boards) {
    if (boards.length &lt; 1) {
        return false
    } else { 
        let first = boards.shift() 
        const tryPath = solve(first)
        if (tryPath != false) {
           return tryPath
        } else {
           return searchForSolution(boards)
        }
    }
}
// 첫 번째 빈 자리를 찾고 해당 자리를 숫자 1...9로 채우는 9개의 다른 보드를 생성
function nextBoards(board){ 
    let res = []
    const firstEmpty = findEmptySquare(board)
    if (firstEmpty != undefined){
        const y = firstEmpty[0]
        const x = firstEmpty[1]
        for (let i = 1; i &lt;= 9; i++){
            let newBoard = [...board]
            let row = [...newBoard[y]]
            row[x] = i
            newBoard[y] = row
            res.push(newBoard)
        }
    }
    return res
}
// 첫 번째 빈 자리에 대한 i j 좌표 가져오기)
function findEmptySquare(board){
    for (let i = 0; i &lt; 9; i++){
        for (let j = 0; j &lt; 9; j++){
            if (board[i][j] == 0) {
                return [i, j]
            }
        }
    }
}
// 각 행(가로줄)에 반복되는 숫자가 없는지 검사
function rowsCheck(board){
    for (let i = 0; i &lt; 9; i++){
        let cur = []
        for (let j = 0; j &lt; 9; j++){
            if (cur.includes(board[i][j])){
                return false
            }
            else if (board[i][j] != 0){
                cur.push(board[i][j])
            }
        }
    }
    return true
}
// 각 열(세로줄)에 반복되는 숫자가 없는지 검사
function columnsCheck(board){
    for (let i = 0; i &lt; 9; i++){
        let cur = []
        for (let j = 0; j &lt; 9; j++){
            if (cur.includes(board[j][i])){
                return false
            }
            else if (board[j][i] != 0){
                cur.push(board[j][i])
            }
        }
    }
    return true
}
// 각 박스(3x3)에 반복되는 숫자가 없는지 검사
function boxesCheck(board){
    const boxCoordinates = [[0, 0], [0, 1], [0, 2],
                            [1, 0], [1, 1], [1, 2],
                            [2, 0], [2, 1], [2, 2]]
    for (let y = 0; y &lt; 9; y += 3){
        for (let x = 0; x &lt; 9; x += 3){
            // 순회는 각 상자를 검사해야 한다.
            let cur = []
            for (let i = 0; i &lt; 9; i++){
                let coordinates = [...boxCoordinates[i]]
                coordinates[0] += y
                coordinates[1] += x
                if (cur.includes(board[coordinates[0]][coordinates[1]])){
                    return false
                }
                else if (board[coordinates[0]][coordinates[1]] != 0){
                    cur.push(board[coordinates[0]][coordinates[1]])
                }
            }
        }
    }
    return true
}
~~~</content><author><name>Byungchan Park</name><email>prettygood236@gmail.com</email></author><category term="coding-test" /><category term="coding-test" /><summary type="html">Back tracking을 이용한 스도쿠 문제풀이</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/coding-test/sudoku.png" /><media:content medium="image" url="http://localhost:4000/assets/img/coding-test/sudoku.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Fundamentals of Algorithms - 1. Greedy</title><link href="http://localhost:4000/data-structures-and-algorithms/greedy.html" rel="alternate" type="text/html" title="Fundamentals of Algorithms - 1. Greedy" /><published>2022-02-01T00:00:00+09:00</published><updated>2022-02-01T00:00:00+09:00</updated><id>http://localhost:4000/data-structures-and-algorithms/greedy</id><content type="html" xml:base="http://localhost:4000/data-structures-and-algorithms/greedy.html">Algorithm is a set of &lt;span style='font-size:1em'&gt;***well-defined instructions to solve a particular problem.***&lt;/span&gt; &lt;br&gt;
It takes a set of input and produces a desired output. 

* toc
{:toc .large-only}

**Qualities of Good Algorithms**

- Input and output should be defined precisely.
- Each step in the algorithm should be clear and unambiguous.
- Algorithms should be most effective among many different ways to solve a problem.
- An algorithm shouldn't include computer code. Instead, the algorithm should be written - in such a way that it can be used in different programming languages.

## 1. Greedy

### 1.1 What is Greedy algorithm?

Greedy algorithm means a method to &lt;span style='background-color: #FFF39B;'&gt;*choose only good things from the current situation.*&lt;/span&gt;

- A typical greedy algorithm requires the ability to come up with minimal ideas to solve a problem.
- It is important to analyze the legitimacy of the greedy solution.
  - Examine whether an optimal solution can be obtained by iteratively selecting the one that looks the best.

In a greedy algorithm problem,  it is &lt;span style='background-color: #FFF39B; font-size:1.1em'&gt;*necessary to be able to come up with a minimal ideas for solving the problem and examine whether this is justified.*&lt;/span&gt;

### 1.2 Greedy Example Problem  

#### 1.2.1 Problem : Until it becomes 1 

Until a certain number N becomes 1, one of the following two processes is repeatedly selected and performed. However, the second operation can be selected only when N is divisible by K. 

1. Subtract 1 from N. 
2. Divide N by K. 

For example, if N = 17, K = 4 &lt;br&gt; 
1) 17 - 1 = 16  &lt;br&gt; 
2) 16 // 4 = 4 &lt;br&gt; 
3) 4 // 4 = 1 

The number of times the entire process is executed becomes 3. This is the minimum number of times to make N equal to 1.

**Difficulty: 1 \| 15 minutes to solve \| Time limit 2 seconds \| Memory limit 128 MB**
{:.message}

**Input conditions** &lt;br&gt;
In the first line N (2 &lt;= N &lt;= 100,000) and K (2 &lt;= K &lt;= 100,000) separated by spaces, each given as a natural number.

**Output conditions** &lt;br&gt;
In the first line, print the minimum value for the number of times that one or two processes must be performed until N becomes 1.

| Input Example | Output Example |
|`25 5`|`2`|

#### 1.2.2 Solution : Until it becomes 1

Since K is greater than 2, dividing by K will always reduce N faster than subtracting 1. &lt;br&gt;
Also, N will always becomes 1. 

*Dividing as many as possible guarantees an optimal solution!*

~~~py
# Python
# Get input with N, K separated by spaces
n, k = map(int, input(). split())
result = 0

while True:
    # Subtract until N is divisible by K
     target = (n // k) * k
     result += (n - target)
     n = target
    # Escape from loop when N is less than K (not more divisible)
     if n &lt; k:
     break
    # Divide by K
     result += 1
     n //= k
 
# Subtract 1 for the last remaining number
reslut += (n - 1)
print(result)
~~~

#### 1.2.3 Problom : Multiply or Add 

Given a string s where each digit consists of only numbers (0 to 9), check all numbers one by one from left to right, and insert the 'x' or '+' operator between the numbers to find the largest number that can be made as a result. Write a program to retrieve it. 
However, unlike the usual way of calculating x before +, it is assumed that all operations are performed in order from the left.


**Difficulty: 1 \| 30 minutes to solve \| Time limit 1 seconds \| Memory limit 128 MB \| Previous Facebook interview**
{:.message}

**Input conditions** &lt;br&gt;
The first line is given a string S of several numbers. (1&lt;=S.length&lt;=20)

**Output conditions** &lt;br&gt;
Print the largest possible number in the first line.

| Input Example 1 | Output Example 1|
|`02984`|`576`|

| Input Example 2 | Output Example 2|
|`567`|`210`|

#### 1.2.4 Solution : Multiply or Add 

In most cases, 'x' makes the value larger than '+'. For example, 5+6=11 and 5X6=30.
- However, if any of the two numbers is '0' or '1', it is more efficient to perform '+' rather than 'x'

*Therefore, when performing an operation on two numbers, if one of the two numbers is less than 1, '+' it, and if both numbers are 2 or more, 'x' is the correct answer.*

~~~py
# Python
data = input()

# Replace the first character with a number
result = int(data[0])

for i in range(1, len(data)):
     # If either number is '0' or '1', '+' rather than 'x'.
     num = int(data[i])
     if num &lt;= 1 or result &lt;= 1:
         result += num
     else:
         result *= num

print(result)
~~~




&lt;!-- Back to [Fundamentals of Data Structures](_posts/Data Structures and Algorithms/Data Structures/2022-01-31-fundamentals-of-data-structures.md){:.heading.flip-title}
{:.read-more}  --&gt;

[https://www.freecodecamp.org/](https://www.freecodecamp.org/){:target=&quot;_blank&quot;}&lt;br&gt;
[https://www.programiz.com/](https://www.programiz.com/){:target=&quot;_blank&quot;}&lt;br&gt;
[https://www.geeksforgeeks.org/](https://www.geeksforgeeks.org/){:target=&quot;_blank&quot;}&lt;br&gt;
[https://blog.naver.com/PostList.naver?blogId=ndb796](https://blog.naver.com/PostList.naver?blogId=ndb796){:target=&quot;_blank&quot;}&lt;br&gt;
이것이 코딩테스트다,2020,나동빈,한빛미디어
{:.note title=&quot;reference&quot;}</content><author><name>Byungchan Park</name><email>prettygood236@gmail.com</email></author><category term="data-structures-and-algorithms" /><category term="algorithms" /><summary type="html">Algorithm is a set of well-defined instructions to solve a particular problem. It takes a set of input and produces a desired output.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/data-structures-and-algorithms/greedy_main.png" /><media:content medium="image" url="http://localhost:4000/assets/img/data-structures-and-algorithms/greedy_main.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Fundamentals of Algorithms - 2. Implementation</title><link href="http://localhost:4000/data-structures-and-algorithms/implementation.html" rel="alternate" type="text/html" title="Fundamentals of Algorithms - 2. Implementation" /><published>2022-02-01T00:00:00+09:00</published><updated>2022-02-01T00:00:00+09:00</updated><id>http://localhost:4000/data-structures-and-algorithms/implementation</id><content type="html" xml:base="http://localhost:4000/data-structures-and-algorithms/implementation.html">* toc
{:toc .large-only}

## 2. Implementation

### 2.1 What is Implementation?

Implementation is &lt;span style='background-color: #FFF39B; font-size:1.1em'&gt;*the process of converting an algorithm in your head into source code.*&lt;/span&gt;

Example of implementation type problem is:
- The algorithm is simple, but the code becomes excessively long.
- Problems dealing with real numbers and outputting to a certain number of decimal places.
- Problems that have to be dealt with by breaking strings according to certain criteria.
- The problem of finding and using the appropriate library.

There are many similarities between the type ***Simulation*** , ***Implementation***, and ***Brute-Force*** in coding tests.

### 2.2 Implementation Example Problem  


#### 2.2.1 Problem : Left, Right, Up, Down

Traveler A stands on a square space of size N × N. This space is divided into squares of size 1 × 1. &lt;br&gt;
The upper-left coordinate corresponds to (1, 1), and the lower-right coordinate corresponds to (N, N). &lt;br&gt;
Traveler A can move up, down, left and right, and the starting coordinate is always (1, 1). In front of us is a plan with traveler A's plans to move.

In the plan, one letter of L, R, U, and D is repeatedly written on one line based on space.
The meaning of each character is as follows.

L: move one space to the left &lt;br&gt;
R: move one space to the right &lt;br&gt;
U: move up one space &lt;br&gt;
D: move down one space &lt;br&gt;

In this case, the movement of traveler A outside the square space of size N × N is ignored. &lt;br&gt;
For example, if L or U is encountered at position (1, 1), it is ignored. &lt;br&gt;

![left-right-up-down_example](/assets/img/coding-test/left-right-up-down_example.png)
the map and plan for N = 5
{:.figure}

**Difficulty: 1 \| 15 minutes to solve \| Time limit 2 seconds \| Memory limit 128 MB**
{:.message}

**Input conditions** &lt;br&gt;
The first line is given an N indicating the size of the space. (1&lt;=N&lt;=100) &lt;br&gt;
In the second line, the contents of the travel plan for traveler A are given. (1&lt;=Number of moves&lt;=100)

**Output conditions** &lt;br&gt;
In the first line, print the number written on the card selected according to the rules of the game.

| Input Example | Output Example|
|`5`|`3 4`|
|`R R R U D D`|

#### 2.2.2 Solution : Left, Right, Up, Down

This is a problem that needs to implement faithfully according to the requirements.

~~~py
# Python
# Get N input
n = int(input())
x, y = 1, 1
plans = input(). split()

# Direction of movement according to L, R, U, D
dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]
move_types = ['L', 'R', 'U', 'D']

# Check the move plans one by one
for plan in plans:
     # Get coordinates after moving
     for i in range(len(move_types)):
         if plan == move_types[i]:
             nx = x + dx[i]
             ny = y + dy[i]
     # Ignore if out of space
     if nx &lt; 1 or ny &lt; 1 or nx &gt; n or ny &gt; n:
         continue
     # Perform a move
     x, y = nx, ny

print(x, y)
~~~

#### 2.2.3 Problem : Royal Knight

When the position of the knight on the 8 × 8 coordinate plane is given, the number of cases in which the knight can move is output. A knight can move from a specific location in the following two cases:

1. Move two spaces horizontally and then move one space vertically
2. Move two spaces vertically and then move one space horizontally

Write a program. In the royal garden, row positions are expressed as 1 to 8, and column positions are expressed as
express from a to h.

![Royal Knight](/assets/img/coding-test/royal-knight.png){:width=&quot;50%&quot;}

There are 6 possible moves when in c2.&lt;br&gt;
There are 2 possible moves when in a1.

**Difficulty: 1 \| 20 minutes to solve \| Time limit 1 seconds \| Memory limit 128 MB**
{:.message}

**Input conditions** &lt;br&gt;
In the first line, a two-character string representing the coordinates of where the knight is currently located on the 8x8 coordinate plane is entered. Input characters consist of columns and rows, like a1.

**Output conditions** &lt;br&gt;
In the first line, print the number of times a knight can move.

| Input Example | Output Example|
|a1|2|

#### 2.2.4 Solution : Royal Knight

Check the 8 paths of the knight one by one and check if it is possible to move to each location. &lt;br&gt;
Using the list, define direction vectors for 8 directions.

~~~py
# Python
# Get the current knight's location
input_data = input()
row = int(input_data[1])
column = int(ord(input_data[0])) - int(ord('a')) + 1

# Define 8 directions a knight can move
steps = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2 ), (-2, 1)]

# Check if it is possible to move to each position in 8 directions
result = 0
for step in steps:
     # Check the location you want to move
     next_row = row + step[0]
     next_column = column + step[1]
     # If it is possible to move to that location, the count is increased.
     if next_row &gt;= 1 and next_row &lt;= 8 and next_column &gt;= 1 and next_column &lt;= 8:
         result += 1

print(result)
~~~




[https://www.freecodecamp.org/](https://www.freecodecamp.org/){:target=&quot;_blank&quot;}&lt;br&gt;
[https://www.programiz.com/](https://www.programiz.com/){:target=&quot;_blank&quot;}&lt;br&gt;
[https://www.geeksforgeeks.org/](https://www.geeksforgeeks.org/){:target=&quot;_blank&quot;}&lt;br&gt;
[https://blog.naver.com/PostList.naver?blogId=ndb796](https://blog.naver.com/PostList.naver?blogId=ndb796){:target=&quot;_blank&quot;}&lt;br&gt;
이것이 코딩테스트다,2020,나동빈,한빛미디어
{:.note title=&quot;reference&quot;}</content><author><name>Byungchan Park</name><email>prettygood236@gmail.com</email></author><category term="data-structures-and-algorithms" /><category term="algorithms" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/data-structures-and-algorithms/algorithm_main.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/data-structures-and-algorithms/algorithm_main.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>